{
  "version": 3,
  "sources": ["../../../src/production-index.ts", "../../../../../../../Users/Administrator/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../Users/Administrator/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-3Ed9e5/middleware-insertion-facade.js", "../../../../../../../Users/Administrator/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-3Ed9e5/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\sites\\carrierllm\\apps\\worker\\.wrangler\\tmp\\dev-HYJRyz",
  "sourcesContent": ["interface Env {\r\n  DB: D1Database;\r\n  DOCS_BUCKET: R2Bucket;\r\n  CARRIER_INDEX: any;\r\n  AI: any;\r\n  STRIPE_WEBHOOK_SECRET: string;\r\n  STRIPE_SECRET_KEY: string;\r\n  CLOUDFLARE_ACCOUNT_ID: string;\r\n  CLOUDFLARE_API_TOKEN: string;\r\n  CLERK_SECRET_KEY: string;\r\n  APP_URL: string;\r\n  WWW_URL: string;\r\n}\r\n\r\ninterface CarrierRecommendation {\r\n  carrierId: string;\r\n  carrierName: string;\r\n  fitScore: number;\r\n  reasons: string[];\r\n  concerns: string[];\r\n  estimatedPremium: string;\r\n  underwritingClass: string;\r\n  citations: Array<{\r\n    documentTitle: string;\r\n    pageNumber?: number;\r\n    relevantText: string;\r\n    confidence: number;\r\n  }>;\r\n}\r\n\r\ninterface UserProfile {\r\n  userId: string;\r\n  email?: string;\r\n  subscriptionStatus: 'active' | 'past_due' | 'suspended' | 'canceled';\r\n  subscriptionTier: 'individual' | 'team' | 'enterprise';\r\n  usageStats: {\r\n    recommendationsUsed: number;\r\n    recommendationsLimit: number;\r\n    currentPeriodStart: string;\r\n    currentPeriodEnd: string;\r\n  };\r\n  createdAt: string;\r\n  lastActiveAt: string;\r\n}\r\n\r\n// Utility functions\r\nfunction extractCarrierInfo(filename: string) {\r\n  const name = filename.replace('.pdf', '').toLowerCase();\r\n  const carrierMappings: Record<string, string> = {\r\n    'agl': 'american-general-life',\r\n    'allianz': 'allianz',\r\n    'americo': 'americo',\r\n    'columbus': 'columbus-life',\r\n    'corbridge': 'corbridge',\r\n    'ethos': 'ethos',\r\n    'f&g': 'fidelity-guarantee',\r\n    'foresters': 'foresters',\r\n    'moo': 'mutual-of-omaha',\r\n    'plag': 'pacific-life',\r\n    'plc': 'pacific-life',\r\n    'prudential': 'prudential',\r\n    'securian': 'securian',\r\n    'symetra': 'symetra',\r\n    'transamerica': 'transamerica'\r\n  };\r\n\r\n  for (const [key, carrierId] of Object.entries(carrierMappings)) {\r\n    if (name.includes(key)) {\r\n      return {\r\n        carrierId,\r\n        carrierName: carrierId.split('-').map(word =>\r\n          word.charAt(0).toUpperCase() + word.slice(1)\r\n        ).join(' ')\r\n      };\r\n    }\r\n  }\r\n\r\n  const firstWord = name.split(/[\\s_-]/)[0];\r\n  return {\r\n    carrierId: firstWord.toLowerCase(),\r\n    carrierName: firstWord.charAt(0).toUpperCase() + firstWord.slice(1)\r\n  };\r\n}\r\n\r\nasync function verifyUserAccess(userId: string, env: Env): Promise<UserProfile | null> {\r\n  const user = await env.DB.prepare(\r\n    'SELECT * FROM user_profiles WHERE user_id = ?'\r\n  ).bind(userId).first();\r\n\r\n  if (!user) return null;\r\n\r\n  return {\r\n    userId: user.user_id,\r\n    email: user.email,\r\n    subscriptionStatus: user.subscription_status,\r\n    subscriptionTier: user.subscription_tier,\r\n    usageStats: {\r\n      recommendationsUsed: user.recommendations_used || 0,\r\n      recommendationsLimit: user.recommendations_limit || 200,\r\n      currentPeriodStart: user.current_period_start,\r\n      currentPeriodEnd: user.current_period_end\r\n    },\r\n    createdAt: user.created_at,\r\n    lastActiveAt: user.last_active_at\r\n  };\r\n}\r\n\r\nasync function checkUsageLimits(userProfile: UserProfile): Promise<boolean> {\r\n  const limits = {\r\n    individual: 200,\r\n    team: 1000,\r\n    enterprise: 10000\r\n  };\r\n\r\n  const limit = limits[userProfile.subscriptionTier] || 200;\r\n  return userProfile.usageStats.recommendationsUsed < limit;\r\n}\r\n\r\nasync function processDocumentForRAG(\r\n  documentKey: string,\r\n  documentId: string,\r\n  env: Env\r\n): Promise<void> {\r\n  try {\r\n    // Get document from R2\r\n    const document = await env.DOCS_BUCKET.get(documentKey);\r\n    if (!document) throw new Error('Document not found in R2');\r\n\r\n    // For now, create simple chunks from document metadata\r\n    // In production, you'd extract text from PDF and chunk it properly\r\n    const chunks = await createDocumentChunks(documentKey, documentId);\r\n\r\n    // Generate embeddings for each chunk\r\n    for (const chunk of chunks) {\r\n      const embedding = await generateEmbedding(chunk.text, env);\r\n\r\n      // Store chunk in database\r\n      await env.DB.prepare(\r\n        `INSERT INTO chunks (id, document_id, content, chunk_index, embedding_id, created_at)\r\n         VALUES (?, ?, ?, ?, ?, ?)`\r\n      ).bind(\r\n        chunk.id,\r\n        documentId,\r\n        chunk.text,\r\n        chunk.index,\r\n        chunk.id, // Use chunk ID as embedding ID\r\n        new Date().toISOString()\r\n      ).run();\r\n\r\n      // Store embedding in Vectorize\r\n      await env.CARRIER_INDEX.upsert([{\r\n        id: chunk.id,\r\n        values: embedding,\r\n        metadata: {\r\n          documentId,\r\n          chunkIndex: chunk.index,\r\n          carrierId: chunk.carrierId,\r\n          text: chunk.text.substring(0, 500) // Store snippet\r\n        }\r\n      }]);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Failed to process document ${documentKey}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function createDocumentChunks(documentKey: string, documentId: string) {\r\n  // Extract carrier info from document key\r\n  const filename = documentKey.split('/').pop() || documentKey;\r\n  const carrierInfo = extractCarrierInfo(filename);\r\n\r\n  // For now, create representative chunks based on common underwriting topics\r\n  const topics = [\r\n    `${carrierInfo.carrierName} underwriting guidelines for life insurance applications`,\r\n    `${carrierInfo.carrierName} medical underwriting requirements and health conditions`,\r\n    `${carrierInfo.carrierName} age and coverage amount limits for different products`,\r\n    `${carrierInfo.carrierName} nicotine and tobacco use underwriting standards`,\r\n    `${carrierInfo.carrierName} financial underwriting and income requirements`,\r\n    `${carrierInfo.carrierName} aviation and high-risk activity exclusions`,\r\n    `${carrierInfo.carrierName} simplified issue and accelerated underwriting programs`\r\n  ];\r\n\r\n  return topics.map((text, index) => ({\r\n    id: `${documentId}-chunk-${index}`,\r\n    text,\r\n    index,\r\n    carrierId: carrierInfo.carrierId\r\n  }));\r\n}\r\n\r\nasync function generateEmbedding(text: string, env: Env): Promise<number[]> {\r\n  const response = await env.AI.run('@cf/baai/bge-base-en-v1.5', {\r\n    text: [text]\r\n  });\r\n\r\n  return response.data[0];\r\n}\r\n\r\nasync function performRAGSearch(\r\n  query: string,\r\n  env: Env,\r\n  topK: number = 10\r\n): Promise<Array<{ text: string; carrierId: string; confidence: number }>> {\r\n  // Generate embedding for the query\r\n  const queryEmbedding = await generateEmbedding(query, env);\r\n\r\n  // Search in Vectorize\r\n  const searchResults = await env.CARRIER_INDEX.query({\r\n    vector: queryEmbedding,\r\n    topK,\r\n    returnMetadata: true\r\n  });\r\n\r\n  return searchResults.matches.map((match: any) => ({\r\n    text: match.metadata.text,\r\n    carrierId: match.metadata.carrierId,\r\n    confidence: match.score\r\n  }));\r\n}\r\n\r\nasync function generateRecommendations(\r\n  intakeData: any,\r\n  ragResults: Array<{ text: string; carrierId: string; confidence: number }>,\r\n  env: Env\r\n): Promise<CarrierRecommendation[]> {\r\n  // Group RAG results by carrier\r\n  const carrierResults = ragResults.reduce((acc, result) => {\r\n    if (!acc[result.carrierId]) acc[result.carrierId] = [];\r\n    acc[result.carrierId].push(result);\r\n    return acc;\r\n  }, {} as Record<string, typeof ragResults>);\r\n\r\n  // Generate recommendations for each carrier with relevant context\r\n  const recommendations: CarrierRecommendation[] = [];\r\n\r\n  for (const [carrierId, results] of Object.entries(carrierResults)) {\r\n    const carrier = await env.DB.prepare(\r\n      'SELECT * FROM carriers WHERE id = ?'\r\n    ).bind(carrierId).first();\r\n\r\n    if (!carrier) continue;\r\n\r\n    // Create context from RAG results\r\n    const context = results.map(r => r.text).join('\\n\\n');\r\n\r\n    // Use AI to analyze fit\r\n    const analysis = await env.AI.run('@cf/meta/llama-3.1-8b-instruct', {\r\n      messages: [\r\n        {\r\n          role: 'system',\r\n          content: `You are an insurance underwriting expert. Analyze the client's information against the carrier's guidelines and provide a fit score (0-100), reasons for recommendation, concerns, and estimated underwriting class.\r\n\r\nClient Information:\r\n- Age: ${intakeData.age || 'Not provided'}\r\n- State: ${intakeData.state || 'Not provided'}\r\n- Height: ${intakeData.height || 'Not provided'} inches\r\n- Weight: ${intakeData.weight || 'Not provided'} lbs\r\n- Nicotine use: ${intakeData.nicotineUse || 'Not provided'}\r\n- Health conditions: ${intakeData.majorConditions || 'None specified'}\r\n- Coverage amount: $${intakeData.coverageAmount || 'Not specified'}\r\n\r\nCarrier Guidelines:\r\n${context}\r\n\r\nRespond in JSON format with: fitScore (0-100), reasons (array), concerns (array), estimatedClass (string), estimatedPremium (string).`\r\n        }\r\n      ]\r\n    });\r\n\r\n    try {\r\n      const result = JSON.parse(analysis.response);\r\n\r\n      recommendations.push({\r\n        carrierId,\r\n        carrierName: carrier.display_name,\r\n        fitScore: result.fitScore || 75,\r\n        reasons: result.reasons || [`Good fit for ${carrier.display_name}`],\r\n        concerns: result.concerns || [],\r\n        estimatedPremium: result.estimatedPremium || 'Quote required',\r\n        underwritingClass: result.estimatedClass || 'Standard',\r\n        citations: results.map(r => ({\r\n          documentTitle: `${carrier.display_name} Guidelines`,\r\n          relevantText: r.text.substring(0, 200) + '...',\r\n          confidence: r.confidence\r\n        }))\r\n      });\r\n    } catch (error) {\r\n      // Fallback if AI parsing fails\r\n      recommendations.push({\r\n        carrierId,\r\n        carrierName: carrier.display_name,\r\n        fitScore: 75,\r\n        reasons: [`Matches ${carrier.display_name} guidelines`],\r\n        concerns: ['Detailed review required'],\r\n        estimatedPremium: 'Quote required',\r\n        underwritingClass: 'Standard',\r\n        citations: results.map(r => ({\r\n          documentTitle: `${carrier.display_name} Guidelines`,\r\n          relevantText: r.text.substring(0, 200) + '...',\r\n          confidence: r.confidence\r\n        }))\r\n      });\r\n    }\r\n  }\r\n\r\n  // Sort by fit score\r\n  return recommendations.sort((a, b) => b.fitScore - a.fitScore);\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n    };\r\n\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { headers });\r\n    }\r\n\r\n    try {\r\n      // Health check\r\n      if (path === '/api/health' && request.method === 'GET') {\r\n        return new Response(JSON.stringify({\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          environment: {\r\n            hasDB: !!env.DB,\r\n            hasBucket: !!env.DOCS_BUCKET,\r\n            hasVectorize: !!env.CARRIER_INDEX,\r\n            hasAI: !!env.AI\r\n          }\r\n        }), { headers });\r\n      }\r\n\r\n      // Process documents for RAG\r\n      if (path === '/api/carriers/process-documents' && request.method === 'POST') {\r\n        try {\r\n          const documents = await env.DB.prepare(\r\n            'SELECT * FROM documents WHERE processed = FALSE OR processed IS NULL'\r\n          ).all();\r\n\r\n          let processedCount = 0;\r\n\r\n          for (const doc of documents.results || []) {\r\n            await processDocumentForRAG(doc.r2_key, doc.id, env);\r\n\r\n            // Mark as processed\r\n            await env.DB.prepare(\r\n              'UPDATE documents SET processed = TRUE WHERE id = ?'\r\n            ).bind(doc.id).run();\r\n\r\n            processedCount++;\r\n          }\r\n\r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            processed: processedCount,\r\n            message: `Processed ${processedCount} documents for RAG`\r\n          }), { headers });\r\n\r\n        } catch (error) {\r\n          console.error('Document processing error:', error);\r\n          return new Response(JSON.stringify({\r\n            error: 'Failed to process documents',\r\n            message: error instanceof Error ? error.message : 'Unknown error'\r\n          }), { status: 500, headers });\r\n        }\r\n      }\r\n\r\n      // Sync R2 documents to database (from before)\r\n      if (path === '/api/carriers/sync-r2' && request.method === 'POST') {\r\n        try {\r\n          const objects = await env.DOCS_BUCKET.list();\r\n          let syncCount = 0;\r\n\r\n          for (const obj of objects.objects) {\r\n            const filename = obj.key.split('/').pop() || obj.key;\r\n            const carrierInfo = extractCarrierInfo(filename);\r\n\r\n            const existingDoc = await env.DB.prepare(\r\n              'SELECT id FROM documents WHERE r2_key = ?'\r\n            ).bind(obj.key).first();\r\n\r\n            if (existingDoc) continue;\r\n\r\n            const documentId = crypto.randomUUID();\r\n            const createdAt = new Date().toISOString();\r\n\r\n            // Create carrier if doesn't exist\r\n            const existingCarrier = await env.DB.prepare(\r\n              'SELECT id FROM carriers WHERE id = ?'\r\n            ).bind(carrierInfo.carrierId).first();\r\n\r\n            if (!existingCarrier) {\r\n              await env.DB.prepare(\r\n                `INSERT INTO carriers (id, name, display_name, preferred_tier_rank, created_at)\r\n                 VALUES (?, ?, ?, ?, ?)`\r\n              ).bind(\r\n                carrierInfo.carrierId,\r\n                carrierInfo.carrierName,\r\n                carrierInfo.carrierName,\r\n                99,\r\n                createdAt\r\n              ).run();\r\n            }\r\n\r\n            await env.DB.prepare(\r\n              `INSERT INTO documents (id, carrier_id, title, effective_date, version, r2_key, doc_type, processed, created_at)\r\n               VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`\r\n            ).bind(\r\n              documentId,\r\n              carrierInfo.carrierId,\r\n              filename,\r\n              new Date().toISOString().split('T')[0],\r\n              1,\r\n              obj.key,\r\n              'underwriting_guide',\r\n              false,\r\n              createdAt\r\n            ).run();\r\n\r\n            syncCount++;\r\n          }\r\n\r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            synced: syncCount\r\n          }), { headers });\r\n\r\n        } catch (error) {\r\n          console.error('R2 sync error:', error);\r\n          return new Response(JSON.stringify({\r\n            error: 'Failed to sync R2 documents',\r\n            message: error instanceof Error ? error.message : 'Unknown error'\r\n          }), { status: 500, headers });\r\n        }\r\n      }\r\n\r\n      // Intake submission with real RAG processing\r\n      if (path === '/api/intake/submit' && request.method === 'POST') {\r\n        const data = await request.json();\r\n\r\n        // Extract user ID from headers (Clerk)\r\n        const authHeader = request.headers.get('Authorization');\r\n        const userId = authHeader?.replace('Bearer ', '') || 'anonymous';\r\n\r\n        // Verify user access and usage limits\r\n        const userProfile = await verifyUserAccess(userId, env);\r\n        if (!userProfile || userProfile.subscriptionStatus !== 'active') {\r\n          return new Response(JSON.stringify({\r\n            error: 'Access denied',\r\n            message: 'Valid subscription required'\r\n          }), { status: 403, headers });\r\n        }\r\n\r\n        if (!await checkUsageLimits(userProfile)) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Usage limit exceeded',\r\n            message: 'Monthly recommendation limit reached'\r\n          }), { status: 429, headers });\r\n        }\r\n\r\n        // Create intake record\r\n        const intakeId = crypto.randomUUID();\r\n        const createdAt = new Date().toISOString();\r\n\r\n        await env.DB.prepare(\r\n          `INSERT INTO intakes (id, user_id, form_data, status, created_at)\r\n           VALUES (?, ?, ?, ?, ?)`\r\n        ).bind(\r\n          intakeId,\r\n          userId,\r\n          JSON.stringify(data),\r\n          'processing',\r\n          createdAt\r\n        ).run();\r\n\r\n        // Generate search query from intake data\r\n        const searchQuery = `\r\n          Age ${data.age} in ${data.state},\r\n          ${data.height} inches ${data.weight} lbs,\r\n          nicotine use: ${data.nicotineUse || 'never'},\r\n          health conditions: ${data.majorConditions || 'none'},\r\n          coverage amount: $${data.coverageAmount || '500000'}\r\n        `;\r\n\r\n        // Perform RAG search\r\n        const ragResults = await performRAGSearch(searchQuery, env, 15);\r\n\r\n        // Generate recommendations\r\n        const recommendations = await generateRecommendations(data, ragResults, env);\r\n\r\n        // Store recommendation\r\n        const recommendationId = crypto.randomUUID();\r\n        await env.DB.prepare(\r\n          `INSERT INTO recommendations (id, intake_id, user_id, recommendations_data, status, created_at)\r\n           VALUES (?, ?, ?, ?, ?, ?)`\r\n        ).bind(\r\n          recommendationId,\r\n          intakeId,\r\n          userId,\r\n          JSON.stringify(recommendations),\r\n          'completed',\r\n          createdAt\r\n        ).run();\r\n\r\n        // Update usage stats\r\n        await env.DB.prepare(\r\n          'UPDATE user_profiles SET recommendations_used = recommendations_used + 1, last_active_at = ? WHERE user_id = ?'\r\n        ).bind(createdAt, userId).run();\r\n\r\n        // Update intake status\r\n        await env.DB.prepare(\r\n          'UPDATE intakes SET status = ?, completed_at = ? WHERE id = ?'\r\n        ).bind('completed', createdAt, intakeId).run();\r\n\r\n        return new Response(JSON.stringify({\r\n          intakeId,\r\n          recommendationId,\r\n          recommendations,\r\n          totalRecommendations: recommendations.length,\r\n          processed: true\r\n        }), { headers });\r\n      }\r\n\r\n      // Get recommendation by ID\r\n      if (path.startsWith('/api/recommendations/') && request.method === 'GET') {\r\n        const recommendationId = path.split('/').pop();\r\n\r\n        const recommendation = await env.DB.prepare(\r\n          'SELECT * FROM recommendations WHERE id = ?'\r\n        ).bind(recommendationId).first();\r\n\r\n        if (!recommendation) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Not found'\r\n          }), { status: 404, headers });\r\n        }\r\n\r\n        return new Response(JSON.stringify({\r\n          id: recommendation.id,\r\n          intakeId: recommendation.intake_id,\r\n          recommendations: JSON.parse(recommendation.recommendations_data),\r\n          status: recommendation.status,\r\n          createdAt: recommendation.created_at\r\n        }), { headers });\r\n      }\r\n\r\n      // User analytics\r\n      if (path === '/api/analytics/summary' && request.method === 'GET') {\r\n        const authHeader = request.headers.get('Authorization');\r\n        const userId = authHeader?.replace('Bearer ', '') || 'anonymous';\r\n\r\n        const userProfile = await verifyUserAccess(userId, env);\r\n        if (!userProfile) {\r\n          return new Response(JSON.stringify({\r\n            error: 'Access denied'\r\n          }), { status: 403, headers });\r\n        }\r\n\r\n        // Get user's recommendation history\r\n        const recommendations = await env.DB.prepare(\r\n          'SELECT COUNT(*) as total FROM recommendations WHERE user_id = ?'\r\n        ).bind(userId).first();\r\n\r\n        const intakes = await env.DB.prepare(\r\n          'SELECT COUNT(*) as total FROM intakes WHERE user_id = ?'\r\n        ).bind(userId).first();\r\n\r\n        return new Response(JSON.stringify({\r\n          user: userProfile,\r\n          stats: {\r\n            totalRecommendations: recommendations?.total || 0,\r\n            totalIntakes: intakes?.total || 0,\r\n            remainingRecommendations: userProfile.usageStats.recommendationsLimit - userProfile.usageStats.recommendationsUsed\r\n          }\r\n        }), { headers });\r\n      }\r\n\r\n      // Stripe webhook handler (from before)\r\n      if (path === '/api/stripe/webhook' && request.method === 'POST') {\r\n        const body = await request.text();\r\n        const signature = request.headers.get('stripe-signature');\r\n\r\n        if (!signature) {\r\n          return new Response('Missing signature', { status: 400, headers });\r\n        }\r\n\r\n        try {\r\n          const event = JSON.parse(body);\r\n\r\n          switch (event.type) {\r\n            case 'customer.subscription.created':\r\n            case 'customer.subscription.updated':\r\n              const subscription = event.data.object;\r\n\r\n              // Update or create user profile\r\n              await env.DB.prepare(\r\n                `INSERT INTO user_profiles (\r\n                  user_id, email, subscription_status, subscription_tier,\r\n                  recommendations_limit, current_period_start, current_period_end, created_at\r\n                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\r\n                ON CONFLICT(user_id) DO UPDATE SET\r\n                  subscription_status = excluded.subscription_status,\r\n                  subscription_tier = excluded.subscription_tier,\r\n                  recommendations_limit = excluded.recommendations_limit,\r\n                  current_period_start = excluded.current_period_start,\r\n                  current_period_end = excluded.current_period_end`\r\n              ).bind(\r\n                subscription.customer,\r\n                subscription.customer_email || '',\r\n                subscription.status,\r\n                'individual', // Map from Stripe price ID\r\n                200,\r\n                new Date(subscription.current_period_start * 1000).toISOString(),\r\n                new Date(subscription.current_period_end * 1000).toISOString(),\r\n                new Date().toISOString()\r\n              ).run();\r\n\r\n              break;\r\n          }\r\n\r\n          return new Response(JSON.stringify({ received: true }), { headers });\r\n        } catch (error) {\r\n          console.error('Webhook error:', error);\r\n          return new Response('Webhook error', { status: 400, headers });\r\n        }\r\n      }\r\n\r\n      return new Response(JSON.stringify({\r\n        error: 'Not Found',\r\n        path: path,\r\n        method: request.method\r\n      }), { status: 404, headers });\r\n\r\n    } catch (error) {\r\n      console.error('Worker error:', error);\r\n      return new Response(JSON.stringify({\r\n        error: 'Internal Server Error',\r\n        message: error instanceof Error ? error.message : 'Unknown error'\r\n      }), { status: 500, headers });\r\n    }\r\n  }\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\sites\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\production-index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Administrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Administrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\sites\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\production-index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\sites\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-3Ed9e5\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Administrator\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\sites\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-3Ed9e5\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\sites\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-3Ed9e5\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
