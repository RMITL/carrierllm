{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/itty-router@5.0.22/node_modules/itty-router/index.mjs", "../../../src/index.ts", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-8iyGtM/middleware-insertion-facade.js", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-8iyGtM/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\sites\\carrierllm\\carrierllm\\apps\\worker\\.wrangler\\tmp\\dev-d4vgzl",
  "sourcesContent": ["const e=({base:e=\"\",routes:t=[],...r}={})=>({__proto__:new Proxy({},{get:(r,o,a,s)=>(r,...c)=>t.push([o.toUpperCase(),RegExp(`^${(s=(e+r).replace(/\\/+(\\/|$)/g,\"$1\")).replace(/(\\/?\\.?):(\\w+)\\+/g,\"($1(?<$2>*))\").replace(/(\\/?\\.?):(\\w+)/g,\"($1(?<$2>[^$1/]+?))\").replace(/\\./g,\"\\\\.\").replace(/(\\/?)\\*/g,\"($1.*)?\")}/*$`),c,s])&&a}),routes:t,...r,async fetch(e,...r){let o,a,s=new URL(e.url),c=e.query={__proto__:null};for(let[e,t]of s.searchParams)c[e]=c[e]?[].concat(c[e],t):t;for(let[c,n,l,i]of t)if((c==e.method||\"ALL\"==c)&&(a=s.pathname.match(n))){e.params=a.groups||{},e.route=i;for(let t of l)if(null!=(o=await t(e.proxy??e,...r)))return o}}}),t=({base:e=\"\",routes:t=[],...r}={})=>({__proto__:new Proxy({},{get:(r,o,a,s)=>(r,...c)=>t.push([o.toUpperCase?.(),RegExp(`^${(s=(e+r).replace(/\\/+(\\/|$)/g,\"$1\")).replace(/(\\/?\\.?):(\\w+)\\+/g,\"($1(?<$2>*))\").replace(/(\\/?\\.?):(\\w+)/g,\"($1(?<$2>[^$1/]+?))\").replace(/\\./g,\"\\\\.\").replace(/(\\/?)\\*/g,\"($1.*)?\")}/*$`),c,s])&&a}),routes:t,...r,async fetch(e,...o){let a,s,c=new URL(e.url),n=e.query={__proto__:null};for(let[e,t]of c.searchParams)n[e]=n[e]?[].concat(n[e],t):t;e:try{for(let t of r.before||[])if(null!=(a=await t(e.proxy??e,...o)))break e;t:for(let[r,n,l,i]of t)if((r==e.method||\"ALL\"==r)&&(s=c.pathname.match(n))){e.params=s.groups||{},e.route=i;for(let t of l)if(null!=(a=await t(e.proxy??e,...o)))break t}}catch(t){if(!r.catch)throw t;a=await r.catch(t,e.proxy??e,...o)}try{for(let t of r.finally||[])a=await t(a,e.proxy??e,...o)??a}catch(t){if(!r.catch)throw t;a=await r.catch(t,e.proxy??e,...o)}return a}}),r=(e=\"text/plain; charset=utf-8\",t)=>(r,o={})=>{if(void 0===r||r instanceof Response)return r;const a=new Response(t?.(r)??r,o.url?void 0:o);return a.headers.set(\"content-type\",e),a},o=r(\"application/json; charset=utf-8\",JSON.stringify),a=e=>({400:\"Bad Request\",401:\"Unauthorized\",403:\"Forbidden\",404:\"Not Found\",500:\"Internal Server Error\"}[e]||\"Unknown Error\"),s=(e=500,t)=>{if(e instanceof Error){const{message:r,...o}=e;e=e.status||500,t={error:r||a(e),...o}}return t={status:e,...\"object\"==typeof t?t:{error:t||a(e)}},o(t,{status:e})},c=e=>{e.proxy=new Proxy(e.proxy??e,{get:(t,r)=>t[r]?.bind?.(e)??t[r]??t?.params?.[r]})},n=({format:e=o,missing:r=(()=>s(404)),finally:a=[],before:n=[],...l}={})=>t({before:[c,...n],catch:s,finally:[(e,...t)=>e??r(...t),e,...a],...l});class l extends Error{status;constructor(e=500,t){super(\"object\"==typeof t?t.error:t),\"object\"==typeof t&&Object.assign(this,t),this.status=e}}const i=(e,t)=>new Response(null,{...t,status:e}),p=r(\"text/plain; charset=utf-8\",String),f=r(\"text/html\"),u=r(\"image/jpeg\"),h=r(\"image/png\"),g=r(\"image/webp\"),d=async e=>{e.content=e.body?await e.clone().json().catch((()=>e.clone().formData())).catch((()=>e.text())):void 0},w=e=>{e.cookies=(e.headers.get(\"Cookie\")||\"\").split(/;\\s*/).map((e=>e.split(/=(.+)/))).reduce(((e,[t,r])=>r?(e[t]=r,e):e),{})},y=(e={})=>{const{origin:t=\"*\",credentials:r=!1,allowMethods:o=\"*\",allowHeaders:a,exposeHeaders:s,maxAge:c}=e,n=e=>{const o=e?.headers.get(\"origin\");return!0===t?o:t instanceof RegExp?t.test(o)?o:void 0:Array.isArray(t)?t.includes(o)?o:void 0:t instanceof Function?t(o):\"*\"==t&&r?o:t},l=(e,t)=>{for(const[r,o]of Object.entries(t))o&&e.headers.append(r,o);return e};return{corsify:(e,t)=>e?.headers?.get(\"access-control-allow-origin\")||101==e.status?e:l(e.clone(),{\"access-control-allow-origin\":n(t),\"access-control-allow-credentials\":r}),preflight:e=>{if(\"OPTIONS\"==e.method){const t=new Response(null,{status:204});return l(t,{\"access-control-allow-origin\":n(e),\"access-control-allow-methods\":o?.join?.(\",\")??o,\"access-control-expose-headers\":s?.join?.(\",\")??s,\"access-control-allow-headers\":a?.join?.(\",\")??a??e.headers.get(\"access-control-request-headers\"),\"access-control-max-age\":c,\"access-control-allow-credentials\":r})}}}};export{n as AutoRouter,e as IttyRouter,t as Router,l as StatusError,y as cors,r as createResponse,s as error,f as html,u as jpeg,o as json,h as png,i as status,p as text,g as webp,d as withContent,w as withCookies,c as withParams};\n", "import { Router } from 'itty-router';\r\n\r\ninterface Env {\r\n  DB: D1Database;\r\n  DOCS_BUCKET: R2Bucket;\r\n  CARRIER_INDEX: any;\r\n  AI: any;\r\n  RESEND_API_KEY?: string;\r\n  CLERK_WEBHOOK_SECRET?: string;\r\n  CRON_SECRET?: string;\r\n  STRIPE_SECRET_KEY?: string;\r\n}\r\n\r\nconst router = Router();\r\n\r\n// Helper function to add CORS headers\r\nfunction corsHeaders() {\r\n  return {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-User-Id',\r\n    'Content-Type': 'application/json'\r\n  };\r\n}\r\n\r\n// CORS preflight\r\nrouter.options('*', () => {\r\n  return new Response(null, {\r\n    status: 204,\r\n    headers: corsHeaders()\r\n  });\r\n});\r\n\r\n// Health check\r\nrouter.get('/api/health', () => {\r\n  return Response.json(\r\n    { status: 'healthy', timestamp: new Date().toISOString() },\r\n    { headers: corsHeaders() }\r\n  );\r\n});\r\n\r\n// Test carriers endpoint\r\nrouter.get('/api/carriers/test', () => {\r\n  return Response.json(\r\n    { message: 'Carriers test endpoint working' },\r\n    { headers: corsHeaders() }\r\n  );\r\n});\r\n\r\n// Analytics endpoint with live data\r\nrouter.get('/api/analytics/summary', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n\r\n    // Get current month for date filtering\r\n    const now = new Date();\r\n    const currentMonth = now.toISOString().slice(0, 7); // YYYY-MM format\r\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\r\n\r\n    // Initialize response data with real zeros\r\n    let stats = {\r\n      totalIntakes: 0,\r\n      averageFitScore: 0,\r\n      placementRate: 0,\r\n      remainingRecommendations: 0\r\n    };\r\n\r\n    let topCarriers = [];\r\n    let trends = [];\r\n\r\n    try {\r\n      // Get total intakes - check multiple tables for compatibility\r\n      const intakesResult = await env.DB.prepare(`\r\n        SELECT COUNT(*) as count FROM (\r\n          SELECT id FROM intakes\r\n          UNION ALL\r\n          SELECT id FROM intake_submissions\r\n        )\r\n      `).first();\r\n\r\n      stats.totalIntakes = intakesResult?.count || 0;\r\n\r\n      // If we have a user ID, get user-specific data\r\n      if (userId) {\r\n        // Get user's monthly usage\r\n        try {\r\n          const userUsage = await env.DB.prepare(`\r\n            SELECT COUNT(*) as used\r\n            FROM recommendations\r\n            WHERE user_id = ?\r\n              AND created_at >= ?\r\n          `).bind(userId, monthStart).first();\r\n\r\n          const used = userUsage?.used || 0;\r\n          // Get user's actual limit from their profile\r\n          const userProfile = await env.DB.prepare(\r\n            'SELECT recommendations_limit FROM user_profiles WHERE user_id = ?'\r\n          ).bind(userId).first();\r\n          \r\n          const limit = userProfile?.recommendations_limit || 0;\r\n          stats.remainingRecommendations = Math.max(0, limit - used);\r\n        } catch (e) {\r\n          console.log('Could not get user usage:', e);\r\n        }\r\n\r\n        // Get user's average fit score\r\n        try {\r\n          const avgScore = await env.DB.prepare(`\r\n            SELECT AVG(fit_score) as avg\r\n            FROM recommendations\r\n            WHERE user_id = ?\r\n          `).bind(userId).first();\r\n\r\n          if (avgScore?.avg) {\r\n            stats.averageFitScore = Math.round(avgScore.avg);\r\n          } else {\r\n            stats.averageFitScore = 0;\r\n          }\r\n        } catch (e) {\r\n          console.log('Could not get average score:', e);\r\n        }\r\n\r\n        // Get top carriers\r\n        try {\r\n          const carriers = await env.DB.prepare(`\r\n            SELECT\r\n              carrier_id,\r\n              carrier_name,\r\n              COUNT(*) as count,\r\n              AVG(fit_score) as avg_score\r\n            FROM recommendations\r\n            WHERE user_id = ?\r\n            GROUP BY carrier_id, carrier_name\r\n            ORDER BY count DESC\r\n            LIMIT 5\r\n          `).bind(userId).all();\r\n\r\n          if (carriers?.results) {\r\n            topCarriers = carriers.results.map((c: any, idx: number) => ({\r\n              id: c.carrier_id || String(idx + 1),\r\n              name: c.carrier_name || `Carrier ${idx + 1}`,\r\n              count: c.count || 0,\r\n              successRate: Math.round(c.avg_score || 0)\r\n            }));\r\n          }\r\n        } catch (e) {\r\n          console.log('Could not get top carriers:', e);\r\n        }\r\n\r\n        // Get monthly trends (last 6 months)\r\n        try {\r\n          const sixMonthsAgo = new Date();\r\n          sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n          const monthlyData = await env.DB.prepare(`\r\n            SELECT\r\n              strftime('%Y-%m', created_at) as month,\r\n              COUNT(*) as count\r\n            FROM recommendations\r\n            WHERE user_id = ?\r\n              AND created_at >= ?\r\n            GROUP BY strftime('%Y-%m', created_at)\r\n            ORDER BY month DESC\r\n            LIMIT 6\r\n          `).bind(userId, sixMonthsAgo.toISOString()).all();\r\n\r\n          if (monthlyData?.results) {\r\n            trends = monthlyData.results.map((m: any) => ({\r\n              month: m.month,\r\n              intakes: m.count || 0,\r\n              conversions: 0, // No real conversion data available\r\n              conversionRate: 0\r\n            }));\r\n          }\r\n        } catch (e) {\r\n          console.log('Could not get trends:', e);\r\n        }\r\n      }\r\n\r\n      // Calculate placement rate\r\n      try {\r\n        const placements = await env.DB.prepare(`\r\n          SELECT\r\n            COUNT(CASE WHEN status = 'approved' OR status = 'placed' THEN 1 END) as placed,\r\n            COUNT(*) as total\r\n          FROM outcomes\r\n        `).first();\r\n\r\n        if (placements?.total > 0) {\r\n          stats.placementRate = Math.round((placements.placed / placements.total) * 100);\r\n        } else {\r\n          stats.placementRate = 0;\r\n        }\r\n      } catch (e) {\r\n        console.log('Could not get placement rate:', e);\r\n      }\r\n\r\n    } catch (dbError) {\r\n      console.error('Database query error:', dbError);\r\n      // Continue with default values if DB queries fail\r\n    }\r\n\r\n    // Return real data only - no mock data\r\n\r\n    return Response.json({\r\n      stats,\r\n      topCarriers,\r\n      trends,\r\n      lastUpdated: new Date().toISOString()\r\n    }, {\r\n      headers: corsHeaders()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Analytics endpoint error:', error);\r\n\r\n    // Return real zeros on error - no mock data\r\n    return Response.json({\r\n      stats: {\r\n        totalIntakes: 0,\r\n        averageFitScore: 0,\r\n        placementRate: 0,\r\n        remainingRecommendations: 0\r\n      },\r\n      topCarriers: [],\r\n      trends: [],\r\n      lastUpdated: new Date().toISOString(),\r\n      error: 'Analytics data temporarily unavailable'\r\n    }, {\r\n      status: 200, // Return 200 to prevent app crashes\r\n      headers: corsHeaders()\r\n    });\r\n  }\r\n});\r\n\r\n// Intake submission endpoint\r\nrouter.post('/api/intake/submit', async (request, env: Env) => {\r\n  try {\r\n    const intake = await request.json();\r\n    const intakeId = crypto.randomUUID();\r\n    const recommendationId = crypto.randomUUID();\r\n\r\n    // Log intake to database\r\n    const userId = request.headers.get('X-User-Id') || 'anonymous';\r\n    try {\r\n      await env.DB.prepare(`\r\n        INSERT INTO intakes (id, data, user_id, created_at)\r\n        VALUES (?, ?, ?, ?)\r\n      `).bind(intakeId, JSON.stringify(intake), userId, new Date().toISOString()).run();\r\n    } catch (e) {\r\n      console.log('Could not log intake:', e);\r\n    }\r\n\r\n    // TODO: Implement real recommendation generation using RAG system\r\n    // For now, return empty recommendations until real data is available\r\n    const recommendations = [];\r\n\r\n    // Store recommendations\r\n    for (const rec of recommendations) {\r\n      try {\r\n        await env.DB.prepare(`\r\n          INSERT INTO recommendations (\r\n            id, recommendation_id, user_id, carrier_id, carrier_name,\r\n            fit_score, created_at\r\n          ) VALUES (?, ?, ?, ?, ?, ?, ?)\r\n        `).bind(\r\n          crypto.randomUUID(),\r\n          recommendationId,\r\n          userId,\r\n          rec.carrierId,\r\n          rec.carrierName,\r\n          rec.fitScore,\r\n          new Date().toISOString()\r\n        ).run();\r\n      } catch (e) {\r\n        console.log('Could not store recommendation:', e);\r\n      }\r\n    }\r\n\r\n    // Return real response with empty recommendations until RAG system is implemented\r\n    const response = {\r\n      recommendationId,\r\n      status: 'completed',\r\n      intake: intake,\r\n      recommendations: [],\r\n      top: [],\r\n      premiumSuggestion: 'No recommendations available. Please ensure carrier documents are uploaded and processed.',\r\n      summary: {\r\n        averageFit: 0,\r\n        totalCarriersEvaluated: 0,\r\n        tier2Recommended: false,\r\n        topCarrierId: null,\r\n        notes: 'No carriers available for recommendations. Please upload carrier documents and ensure they are processed.'\r\n      },\r\n      metadata: {\r\n        processingTime: 0,\r\n        ragQueriesCount: 0,\r\n        citationsFound: 0,\r\n        modelUsed: 'none'\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return Response.json(response, {\r\n      headers: corsHeaders()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Intake submission error:', error);\r\n    return Response.json(\r\n      { error: 'Failed to process intake' },\r\n      { status: 500, headers: corsHeaders() }\r\n    );\r\n  }\r\n});\r\n\r\n// Get user history\r\nrouter.get('/api/user/:userId/history', async (request, env: Env) => {\r\n  const { userId } = request.params;\r\n\r\n  try {\r\n    const history = [];\r\n\r\n    // Get user's intakes\r\n    try {\r\n      const intakes = await env.DB.prepare(`\r\n        SELECT id, data, created_at\r\n        FROM intakes\r\n        WHERE user_id = ?\r\n        ORDER BY created_at DESC\r\n        LIMIT 50\r\n      `).bind(userId).all();\r\n\r\n      if (intakes?.results) {\r\n        for (const intake of intakes.results) {\r\n          history.push({\r\n            id: intake.id,\r\n            type: 'intake',\r\n            data: JSON.parse(intake.data || '{}'),\r\n            createdAt: intake.created_at,\r\n            status: 'completed'\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log('Could not get intakes:', e);\r\n    }\r\n\r\n    // Get user's recommendations (group by recommendation_id to avoid duplicates)\r\n    try {\r\n      const recommendations = await env.DB.prepare(`\r\n        SELECT\r\n          recommendation_id,\r\n          user_id,\r\n          carrier_id,\r\n          carrier_name,\r\n          fit_score,\r\n          created_at,\r\n          COUNT(*) as carrier_count,\r\n          AVG(fit_score) as avg_fit\r\n        FROM recommendations\r\n        WHERE user_id = ? AND recommendation_id IS NOT NULL\r\n        GROUP BY recommendation_id\r\n        ORDER BY created_at DESC\r\n        LIMIT 50\r\n      `).bind(userId).all();\r\n\r\n      if (recommendations?.results) {\r\n        for (const rec of recommendations.results) {\r\n          history.push({\r\n            id: rec.recommendation_id,\r\n            recommendationId: rec.recommendation_id,\r\n            type: 'recommendation',\r\n            data: {},\r\n            createdAt: rec.created_at,\r\n            status: 'completed',\r\n            summary: {\r\n              averageFit: Math.round(rec.avg_fit || 0),\r\n              eligibleCarriers: rec.carrier_count || 0,\r\n              topCarrierId: rec.carrier_id\r\n            }\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log('Could not get recommendations:', e);\r\n    }\r\n\r\n    // Sort by creation date\r\n    history.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\r\n\r\n    return Response.json(history, {\r\n      headers: corsHeaders()\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('History endpoint error:', error);\r\n    return Response.json(\r\n      { error: 'Failed to fetch history' },\r\n      { status: 500, headers: corsHeaders() }\r\n    );\r\n  }\r\n});\r\n\r\n// Clear user history endpoint\r\nrouter.delete('/api/user/:userId/history', async (request, env: Env) => {\r\n  const { userId } = request.params;\r\n\r\n  try {\r\n    console.log('Clearing history for user:', userId);\r\n    \r\n    // Delete from all relevant tables\r\n    await env.DB.prepare(`\r\n      DELETE FROM recommendations WHERE user_id = ?\r\n    `).bind(userId).run();\r\n    \r\n    await env.DB.prepare(`\r\n      DELETE FROM intakes WHERE user_id = ?\r\n    `).bind(userId).run();\r\n    \r\n    await env.DB.prepare(`\r\n      DELETE FROM intake_submissions WHERE user_id = ?\r\n    `).bind(userId).run();\r\n    \r\n    console.log('History cleared successfully for user:', userId);\r\n    return Response.json({ success: true, message: 'History cleared successfully' }, { \r\n      headers: corsHeaders() \r\n    });\r\n  } catch (error) {\r\n    console.error('Error clearing history:', error);\r\n    return Response.json({ error: 'Failed to clear history' }, { \r\n      status: 500, \r\n      headers: corsHeaders() \r\n    });\r\n  }\r\n});\r\n\r\n// Get recommendation by ID\r\nrouter.get('/api/recommendations/:id', async (request, env: Env) => {\r\n  const { id } = request.params;\r\n\r\n  try {\r\n    // Try to get real recommendations from DB\r\n    const recs = await env.DB.prepare(`\r\n      SELECT * FROM recommendations\r\n      WHERE recommendation_id = ?\r\n    `).bind(id).all();\r\n\r\n    if (recs?.results && recs.results.length > 0) {\r\n      const recommendations = recs.results.map((r: any) => ({\r\n        carrierId: r.carrier_id,\r\n        carrierName: r.carrier_name,\r\n        fitScore: r.fit_score,\r\n        highlights: ['Based on your profile'],\r\n        concerns: [],\r\n        premiumRange: { min: 1200, max: 1800 },\r\n        citations: []\r\n      }));\r\n\r\n      return Response.json({\r\n        recommendationId: id,\r\n        summary: {\r\n          averageFit: 85,\r\n          eligibleCarriers: recommendations.length,\r\n          processingTime: 1250\r\n        },\r\n        recommendations\r\n      }, {\r\n        headers: corsHeaders()\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.log('Could not get recommendations:', e);\r\n  }\r\n\r\n  // Return empty result if no real data found\r\n  return Response.json({\r\n    recommendationId: id,\r\n    summary: {\r\n      averageFit: 0,\r\n      eligibleCarriers: 0,\r\n      processingTime: 0\r\n    },\r\n    recommendations: []\r\n  }, {\r\n    headers: corsHeaders()\r\n  });\r\n});\r\n\r\n// NOTE: All billing is handled by Clerk Billing\r\n// Clerk automatically handles:\r\n// - Stripe integration and webhook processing\r\n// - Subscription status syncing to user/org metadata\r\n// - Payment processing and invoicing\r\n//\r\n// To configure billing:\r\n// 1. Go to Clerk Dashboard > Billing Settings\r\n// 2. Create subscription plans\r\n// 3. Use <PricingTable /> component in your React app\r\n// 4. Check access with has({ plan: 'plan_name' }) or <Protect> component\r\n\r\n// Utility function to extract carrier info from filename\r\nfunction extractCarrierInfo(filename: string) {\r\n  const name = filename.replace('.pdf', '').toLowerCase();\r\n  const carrierMappings: Record<string, string> = {\r\n    'agl': 'american-general-life',\r\n    'allianz': 'allianz',\r\n    'americo': 'americo',\r\n    'columbus': 'columbus-life',\r\n    'corbridge': 'corbridge',\r\n    'ethos': 'ethos',\r\n    'f&g': 'fidelity-guarantee',\r\n    'foresters': 'foresters',\r\n    'moo': 'mutual-of-omaha',\r\n    'plag': 'pacific-life',\r\n    'plc': 'pacific-life',\r\n    'prudential': 'prudential',\r\n    'securian': 'securian',\r\n    'symetra': 'symetra',\r\n    'transamerica': 'transamerica'\r\n  };\r\n\r\n  for (const [key, carrierId] of Object.entries(carrierMappings)) {\r\n    if (name.includes(key)) {\r\n      return {\r\n        carrierId,\r\n        carrierName: carrierId.split('-').map(word =>\r\n          word.charAt(0).toUpperCase() + word.slice(1)\r\n        ).join(' ')\r\n      };\r\n    }\r\n  }\r\n\r\n  const firstWord = name.split(/[\\s_-]/)[0];\r\n  return {\r\n    carrierId: firstWord.toLowerCase(),\r\n    carrierName: firstWord.charAt(0).toUpperCase() + firstWord.slice(1)\r\n  };\r\n}\r\n\r\n// Function to populate carriers table from existing documents\r\nasync function populateCarriersFromDocuments(env: Env) {\r\n  try {\r\n    // Check if carriers table is empty\r\n    const existingCarriers = await env.DB.prepare('SELECT COUNT(*) as count FROM carriers').first();\r\n    if (existingCarriers && existingCarriers.count > 0) {\r\n      return; // Carriers already populated\r\n    }\r\n\r\n    console.log('Populating carriers table from existing documents...');\r\n\r\n    // List all documents in R2\r\n    const list = await env.DOCS_BUCKET.list();\r\n    const pdfFiles = list.objects.filter(obj => obj.key.toLowerCase().endsWith('.pdf'));\r\n\r\n    const carriersMap = new Map<string, any>();\r\n\r\n    // Extract carrier info from each document\r\n    for (const pdfFile of pdfFiles) {\r\n      const carrierInfo = extractCarrierInfo(pdfFile.key);\r\n      \r\n      if (!carriersMap.has(carrierInfo.carrierId)) {\r\n        carriersMap.set(carrierInfo.carrierId, {\r\n          id: carrierInfo.carrierId,\r\n          name: carrierInfo.carrierName,\r\n          am_best: null, // Will be populated later if available\r\n          portal_url: null,\r\n          agent_phone: null,\r\n          preferred_tier_rank: null,\r\n          available_states: JSON.stringify([]),\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        });\r\n      }\r\n    }\r\n\r\n    // Insert carriers into database\r\n    for (const carrier of carriersMap.values()) {\r\n      try {\r\n        await env.DB.prepare(`\r\n          INSERT INTO carriers (id, name, am_best, portal_url, agent_phone, preferred_tier_rank, available_states, created_at, updated_at)\r\n          VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n        `).bind(\r\n          carrier.id,\r\n          carrier.name,\r\n          carrier.am_best,\r\n          carrier.portal_url,\r\n          carrier.agent_phone,\r\n          carrier.preferred_tier_rank,\r\n          carrier.available_states,\r\n          carrier.created_at,\r\n          carrier.updated_at\r\n        ).run();\r\n      } catch (error) {\r\n        console.log(`Carrier ${carrier.id} might already exist, skipping...`);\r\n      }\r\n    }\r\n\r\n    console.log(`Populated ${carriersMap.size} carriers from existing documents`);\r\n  } catch (error) {\r\n    console.error('Error populating carriers from documents:', error);\r\n  }\r\n}\r\n\r\n// Get carriers with user preferences\r\nrouter.get('/api/carriers/with-preferences', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    // First, ensure carriers are populated from existing documents\r\n    await populateCarriersFromDocuments(env);\r\n\r\n    // Get all carriers\r\n    const carriers = await env.DB.prepare('SELECT * FROM carriers ORDER BY name').all();\r\n    \r\n    // Get user preferences\r\n    const userPreferences = await env.DB.prepare(\r\n      'SELECT carrier_id, enabled FROM user_carrier_preferences WHERE user_id = ?'\r\n    ).bind(userId).all();\r\n\r\n    // Get organization settings (if user is in an organization)\r\n    // We'll get the organization ID from the request headers\r\n    const organizationId = request.headers.get('X-Organization-Id');\r\n    \r\n    // Get organization settings if user is in an organization\r\n    let orgSettings = { results: [] };\r\n    if (organizationId) {\r\n      orgSettings = await env.DB.prepare(\r\n        'SELECT carrier_id, enabled FROM organization_carrier_settings WHERE organization_id = ?'\r\n      ).bind(organizationId).all();\r\n    }\r\n\r\n    const carriersWithPreferences = carriers.results.map((carrier: any) => {\r\n      const userPref = userPreferences.results.find((pref: any) => pref.carrier_id === carrier.id);\r\n      const orgSetting = orgSettings.results.find((setting: any) => setting.carrier_id === carrier.id);\r\n      \r\n      const userEnabled = userPref ? userPref.enabled : true; // Default to enabled\r\n      const organizationEnabled = orgSetting ? orgSetting.enabled : true; // Default to enabled\r\n      const isOrganizationControlled = organizationId && orgSetting && !orgSetting.enabled; // Controlled if org disabled it\r\n\r\n      return {\r\n        id: carrier.id,\r\n        name: carrier.name,\r\n        amBest: carrier.am_best,\r\n        portalUrl: carrier.portal_url,\r\n        agentPhone: carrier.agent_phone,\r\n        preferredTierRank: carrier.preferred_tier_rank,\r\n        availableStates: carrier.available_states ? JSON.parse(carrier.available_states) : [],\r\n        userEnabled,\r\n        organizationEnabled,\r\n        isOrganizationControlled\r\n      };\r\n    });\r\n\r\n    return Response.json(carriersWithPreferences, { headers: corsHeaders() });\r\n  } catch (error) {\r\n    console.error('Error fetching carriers with preferences:', error);\r\n    return Response.json({ error: 'Failed to fetch carriers' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Update user carrier preference\r\nrouter.post('/api/carriers/preferences', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    const { carrierId, enabled } = await request.json();\r\n    if (!carrierId || typeof enabled !== 'boolean') {\r\n      return Response.json({ error: 'carrierId and enabled are required' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // Upsert user preference\r\n    await env.DB.prepare(`\r\n      INSERT INTO user_carrier_preferences (id, user_id, carrier_id, enabled, created_at, updated_at)\r\n      VALUES (?, ?, ?, ?, ?, ?)\r\n      ON CONFLICT(user_id, carrier_id) DO UPDATE SET\r\n      enabled = excluded.enabled,\r\n      updated_at = excluded.updated_at\r\n    `).bind(\r\n      crypto.randomUUID(),\r\n      userId,\r\n      carrierId,\r\n      enabled,\r\n      new Date().toISOString(),\r\n      new Date().toISOString()\r\n    ).run();\r\n\r\n    return Response.json({ success: true }, { headers: corsHeaders() });\r\n  } catch (error) {\r\n    console.error('Error updating carrier preference:', error);\r\n    return Response.json({ error: 'Failed to update preference' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Get user documents\r\nrouter.get('/api/documents/user', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    const documents = await env.DB.prepare(`\r\n      SELECT * FROM user_documents \r\n      WHERE user_id = ? \r\n      ORDER BY created_at DESC\r\n    `).bind(userId).all();\r\n\r\n    return Response.json(documents.results, { headers: corsHeaders() });\r\n  } catch (error) {\r\n    console.error('Error fetching user documents:', error);\r\n    return Response.json({ error: 'Failed to fetch documents' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Upload document\r\nrouter.post('/api/documents/upload', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    const formData = await request.formData();\r\n    const carrierId = formData.get('carrierId') as string;\r\n    const carrierName = formData.get('carrierName') as string;\r\n    const title = formData.get('title') as string;\r\n    const file = formData.get('file') as File;\r\n    const docType = formData.get('docType') as string || 'underwriting_guide';\r\n    const effectiveDate = formData.get('effectiveDate') as string;\r\n\r\n    if (!carrierId || !carrierName || !title || !file) {\r\n      return Response.json({ \r\n        error: 'Missing required fields',\r\n        required: ['carrierId', 'carrierName', 'title', 'file']\r\n      }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // Validate file type\r\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];\r\n    if (!allowedTypes.includes(file.type)) {\r\n      return Response.json({ error: 'Invalid file type. Only PDF, DOC, DOCX, and TXT files are allowed.' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // Validate file size (10MB limit)\r\n    if (file.size > 10 * 1024 * 1024) {\r\n      return Response.json({ error: 'File size too large. Maximum size is 10MB.' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    const documentId = crypto.randomUUID();\r\n    const createdAt = new Date().toISOString();\r\n    const r2Key = `user-documents/${userId}/${carrierId}/${createdAt}/${file.name}`;\r\n\r\n    // Store file in R2\r\n    const fileBuffer = await file.arrayBuffer();\r\n    await env.DOCS_BUCKET.put(r2Key, fileBuffer, {\r\n      httpMetadata: {\r\n        contentType: file.type\r\n      }\r\n    });\r\n\r\n    // Store metadata in database\r\n    await env.DB.prepare(`\r\n      INSERT INTO user_documents (\r\n        id, user_id, carrier_id, title, filename, r2_key, file_size, \r\n        content_type, doc_type, effective_date, version, processed, created_at\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).bind(\r\n      documentId,\r\n      userId,\r\n      carrierId,\r\n      title,\r\n      file.name,\r\n      r2Key,\r\n      file.size,\r\n      file.type,\r\n      docType,\r\n      effectiveDate || new Date().toISOString().split('T')[0],\r\n      '1.0',\r\n      false, // Will be processed later\r\n      createdAt\r\n    ).run();\r\n\r\n    return Response.json({\r\n      success: true,\r\n      documentId,\r\n      message: 'Document uploaded successfully'\r\n    }, { headers: corsHeaders() });\r\n\r\n  } catch (error) {\r\n    console.error('Error uploading document:', error);\r\n    return Response.json({ error: 'Failed to upload document' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Get organization carrier settings (admin only)\r\nrouter.get('/api/carriers/organization-settings', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    // Get organization ID from headers\r\n    const organizationId = request.headers.get('X-Organization-Id');\r\n    if (!organizationId) {\r\n      return Response.json({ error: 'Organization ID required' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // TODO: Verify user is admin in this organization using Clerk\r\n    // For now, we'll allow all authenticated users to access this endpoint\r\n    // In production, you'd verify the user's role in their organization\r\n\r\n    // First, ensure carriers are populated from existing documents\r\n    await populateCarriersFromDocuments(env);\r\n\r\n    // Get all carriers\r\n    const carriers = await env.DB.prepare('SELECT * FROM carriers ORDER BY name').all();\r\n    \r\n    const orgSettings = await env.DB.prepare(\r\n      'SELECT carrier_id, enabled FROM organization_carrier_settings WHERE organization_id = ?'\r\n    ).bind(organizationId).all();\r\n    \r\n    const carriersWithSettings = carriers.results.map((carrier: any) => {\r\n      const orgSetting = orgSettings.results.find((setting: any) => setting.carrier_id === carrier.id);\r\n      const organizationEnabled = orgSetting ? orgSetting.enabled : true; // Default to enabled\r\n\r\n      return {\r\n        id: carrier.id,\r\n        name: carrier.name,\r\n        amBest: carrier.am_best,\r\n        portalUrl: carrier.portal_url,\r\n        agentPhone: carrier.agent_phone,\r\n        preferredTierRank: carrier.preferred_tier_rank,\r\n        availableStates: carrier.available_states ? JSON.parse(carrier.available_states) : [],\r\n        userEnabled: true, // Not relevant for org admin view\r\n        organizationEnabled,\r\n        isOrganizationControlled: true // All carriers in org admin view are org-controlled\r\n      };\r\n    });\r\n\r\n    return Response.json(carriersWithSettings, { headers: corsHeaders() });\r\n  } catch (error) {\r\n    console.error('Error fetching organization carrier settings:', error);\r\n    return Response.json({ error: 'Failed to fetch organization settings' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Update organization carrier setting (admin only)\r\nrouter.post('/api/carriers/organization-settings', async (request, env: Env) => {\r\n  try {\r\n    const userId = request.headers.get('X-User-Id');\r\n    if (!userId) {\r\n      return Response.json({ error: 'User ID required' }, { status: 401, headers: corsHeaders() });\r\n    }\r\n\r\n    // Get organization ID from headers\r\n    const organizationId = request.headers.get('X-Organization-Id');\r\n    if (!organizationId) {\r\n      return Response.json({ error: 'Organization ID required' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // TODO: Verify user is admin in this organization using Clerk\r\n    // For now, we'll allow all authenticated users to access this endpoint\r\n    // In production, you'd verify the user's role in their organization\r\n\r\n    const { carrierId, enabled } = await request.json();\r\n    if (!carrierId || typeof enabled !== 'boolean') {\r\n      return Response.json({ error: 'carrierId and enabled are required' }, { status: 400, headers: corsHeaders() });\r\n    }\r\n\r\n    // Upsert organization setting\r\n    await env.DB.prepare(`\r\n      INSERT INTO organization_carrier_settings (id, organization_id, carrier_id, enabled, created_at, updated_at)\r\n      VALUES (?, ?, ?, ?, ?, ?)\r\n      ON CONFLICT(organization_id, carrier_id) DO UPDATE SET\r\n      enabled = excluded.enabled,\r\n      updated_at = excluded.updated_at\r\n    `).bind(\r\n      crypto.randomUUID(),\r\n      organizationId,\r\n      carrierId,\r\n      enabled,\r\n      new Date().toISOString(),\r\n      new Date().toISOString()\r\n    ).run();\r\n\r\n    return Response.json({ success: true }, { headers: corsHeaders() });\r\n  } catch (error) {\r\n    console.error('Error updating organization carrier setting:', error);\r\n    return Response.json({ error: 'Failed to update organization setting' }, { status: 500, headers: corsHeaders() });\r\n  }\r\n});\r\n\r\n// Clerk webhook endpoint\r\nrouter.post('/webhook', async (request, env: Env) => {\r\n  // Simple webhook handler that just acknowledges receipt\r\n  return Response.json(\r\n    { received: true },\r\n    { status: 200, headers: corsHeaders() }\r\n  );\r\n});\r\n\r\n// Default 404 handler\r\nrouter.all('*', () => {\r\n  return Response.json(\r\n    { message: 'Not found' },\r\n    { status: 404, headers: corsHeaders() }\r\n  );\r\n});\r\n\r\n// Export worker\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    try {\r\n      return await router.handle(request, env, ctx);\r\n    } catch (error) {\r\n      console.error('Worker error:', error);\r\n      return Response.json(\r\n        { error: 'Internal server error' },\r\n        { status: 500, headers: corsHeaders() }\r\n      );\r\n    }\r\n  }\r\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-8iyGtM\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-8iyGtM\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-8iyGtM\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["t", "r", "o", "e", "n", "r"]
}
