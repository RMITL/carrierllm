{
  "version": 3,
  "sources": ["../../../src/test-index.ts"],
  "sourceRoot": "C:\\sites\\carrierllm\\carrierllm\\apps\\worker\\.wrangler\\tmp\\deploy-qTWDvS",
  "sourcesContent": ["// Simple test worker with all required endpoints\r\ninterface Env {\r\n  DB: D1Database;\r\n  DOCS_BUCKET: R2Bucket;\r\n  CARRIER_INDEX: any;\r\n  AI: any;\r\n  CLERK_SECRET_KEY?: string;\r\n}\r\n\r\n// Helper function to generate embeddings\r\nasync function generateEmbedding(text: string, env: Env): Promise<number[]> {\r\n  const response = await env.AI.run('@cf/baai/bge-base-en-v1.5', {\r\n    text: text\r\n  });\r\n  return response.data[0];\r\n}\r\n\r\n// Helper function to perform RAG search\r\nasync function performRAGSearch(\r\n  query: string,\r\n  env: Env,\r\n  topK: number = 10\r\n): Promise<Array<{ text: string; carrierId: string; confidence: number }>> {\r\n  try {\r\n    // Generate embedding for the query\r\n    const queryEmbedding = await generateEmbedding(query, env);\r\n\r\n    // Search in Vectorize\r\n    const searchResults = await env.CARRIER_INDEX.query({\r\n      vector: queryEmbedding,\r\n      topK,\r\n      returnMetadata: true\r\n    });\r\n\r\n    return searchResults.matches?.map((match: any) => ({\r\n      text: match.metadata?.text || '',\r\n      carrierId: match.metadata?.carrierId || 'unknown',\r\n      confidence: match.score || 0\r\n    })) || [];\r\n  } catch (error) {\r\n    console.error('RAG search error:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Helper function to generate real recommendations\r\nasync function generateRealRecommendations(\r\n  intakeData: any,\r\n  ragResults: Array<{ text: string; carrierId: string; confidence: number }>,\r\n  env: Env\r\n): Promise<any[]> {\r\n  try {\r\n    // Group RAG results by carrier\r\n    const carrierResults = ragResults.reduce((acc, result) => {\r\n      const carrierId = result.carrierId as string;\r\n      if (!acc[carrierId]) acc[carrierId] = [];\r\n      acc[carrierId].push(result);\r\n      return acc;\r\n    }, {} as Record<string, typeof ragResults>);\r\n\r\n    const recommendations: any[] = [];\r\n\r\n    // Get carriers from database\r\n    const carriers = await env.DB.prepare('SELECT * FROM carriers LIMIT 5').all();\r\n    const carrierList = carriers.results || [];\r\n\r\n    // If no carriers in DB, use fallback carriers\r\n    const fallbackCarriers = [\r\n      { id: 'progressive', name: 'Progressive', preferred_tier_rank: 1 },\r\n      { id: 'statefarm', name: 'State Farm', preferred_tier_rank: 2 },\r\n      { id: 'allstate', name: 'Allstate', preferred_tier_rank: 3 }\r\n    ];\r\n\r\n    const carriersToUse = carrierList.length > 0 ? carrierList : fallbackCarriers;\r\n\r\n    for (const carrier of carriersToUse) {\r\n      const carrierId = carrier.id;\r\n      const carrierName = carrier.name || carrierId;\r\n      \r\n      // Get relevant context for this carrier\r\n      const carrierContext = carrierResults[carrierId as string] || [];\r\n      const context = carrierContext.map((r: any) => r.text).join('\\n\\n');\r\n\r\n      // Use AI to analyze fit if we have context, otherwise use simple scoring\r\n      let fitScore = 75; // Default score\r\n      let reasons = ['Standard underwriting criteria met'];\r\n      let advisories: string[] = [];\r\n      let confidence = 'medium';\r\n\r\n      if (context && env.AI) {\r\n        try {\r\n          const analysis = await env.AI.run('@cf/meta/llama-3.1-8b-instruct', {\r\n            messages: [\r\n              {\r\n                role: 'system',\r\n                content: `You are an insurance underwriting expert. Analyze the client's information and provide a fit score (0-100), reasons for recommendation, and any concerns.\r\n\r\nClient Information:\r\n- Age: ${intakeData.core?.age || intakeData.age || 'Not provided'}\r\n- State: ${intakeData.core?.state || intakeData.state || 'Not provided'}\r\n- Height: ${intakeData.core?.height || intakeData.height || 'Not provided'} inches\r\n- Weight: ${intakeData.core?.weight || intakeData.weight || 'Not provided'} lbs\r\n- Nicotine use: ${intakeData.core?.nicotineUse || intakeData.nicotineUse || 'Not provided'}\r\n- Health conditions: ${intakeData.core?.majorConditions || intakeData.majorConditions || 'None specified'}\r\n- Coverage amount: $${intakeData.core?.coverageTarget || intakeData.coverageAmount || 'Not specified'}\r\n\r\nCarrier Guidelines:\r\n${context}\r\n\r\nRespond in JSON format with: fitScore (0-100), reasons (array), concerns (array), confidence (low/medium/high).`\r\n              }\r\n            ]\r\n          });\r\n\r\n          const response = analysis.response || analysis;\r\n          const analysisText = typeof response === 'string' ? response : JSON.stringify(response);\r\n          \r\n          // Try to parse AI response\r\n          try {\r\n            const parsed = JSON.parse(analysisText);\r\n            fitScore = Math.min(100, Math.max(0, parsed.fitScore || fitScore));\r\n            reasons = parsed.reasons || reasons;\r\n            advisories = parsed.concerns || advisories;\r\n            confidence = parsed.confidence || confidence;\r\n          } catch (parseError) {\r\n            console.log('Could not parse AI response, using defaults');\r\n          }\r\n        } catch (aiError) {\r\n          console.log('AI analysis failed, using simple scoring:', aiError);\r\n        }\r\n      }\r\n\r\n      // Add some variation based on carrier\r\n      if (carrierId === 'progressive') {\r\n        fitScore = Math.min(100, fitScore + 10);\r\n        reasons = ['Competitive rates', 'Strong financial stability', 'Good customer service'];\r\n      } else if (carrierId === 'statefarm') {\r\n        fitScore = Math.min(100, fitScore + 5);\r\n        reasons = ['Local agent support', 'Multi-policy discounts'];\r\n      } else if (carrierId === 'allstate') {\r\n        fitScore = Math.min(100, fitScore + 2);\r\n        reasons = ['Accident forgiveness', 'Safe driving bonuses'];\r\n      }\r\n\r\n      recommendations.push({\r\n        carrierId,\r\n        carrierName,\r\n        product: 'Indexed Universal Life',\r\n        fitPct: fitScore,\r\n        confidence,\r\n        reasons,\r\n        advisories,\r\n        apsLikely: fitScore < 70,\r\n        citations: carrierContext.map((c: any) => ({\r\n          text: c.text.substring(0, 100) + '...',\r\n          source: 'Carrier Guidelines',\r\n          score: c.confidence\r\n        })),\r\n        ctas: {\r\n          portalUrl: `https://${carrierId as string}.com/apply`,\r\n          phoneNumber: `1-800-${(carrierId as string).toUpperCase()}`\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort by fit score descending\r\n    recommendations.sort((a, b) => b.fitPct - a.fitPct);\r\n\r\n    return recommendations.slice(0, 3); // Return top 3\r\n  } catch (error) {\r\n    console.error('Error generating recommendations:', error);\r\n    // Fallback to simple recommendations\r\n    return [\r\n      {\r\n        carrierId: 'progressive',\r\n        carrierName: 'Progressive',\r\n        product: 'Indexed Universal Life',\r\n        fitPct: 85,\r\n        confidence: 'high',\r\n        reasons: ['Competitive rates', 'Strong financial stability'],\r\n        advisories: [],\r\n        apsLikely: false,\r\n        citations: [],\r\n        ctas: {\r\n          portalUrl: 'https://progressive.com/apply',\r\n          phoneNumber: '1-800-PROGRESSIVE'\r\n        }\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n    \r\n    // CORS headers\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-User-Id',\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { status: 204, headers: corsHeaders });\r\n    }\r\n    \r\n        if (path === '/api/health') {\r\n          return Response.json({ status: 'healthy', timestamp: new Date().toISOString() }, { headers: corsHeaders });\r\n        }\r\n\r\n        // Test endpoint to check database insert\r\n        if (path === '/api/test-db' && request.method === 'POST') {\r\n          try {\r\n            const userId = request.headers.get('X-User-Id') || 'test-user';\r\n            const testId = 'test-' + Date.now();\r\n            \r\n            console.log('Testing database insert with userId:', userId);\r\n            \r\n            const result = await env.DB.prepare(`\r\n              INSERT INTO intakes (id, tenant_id, payload_json, validated, tier2_triggered, created_at, user_id)\r\n              VALUES (?, ?, ?, ?, ?, ?, ?)\r\n            `).bind(\r\n              testId,\r\n              'default-tenant',\r\n              '{\"test\": true}',\r\n              true,\r\n              false,\r\n              new Date().toISOString(),\r\n              userId\r\n            ).run();\r\n            \r\n            console.log('Test insert result:', result);\r\n            \r\n            return Response.json({ \r\n              success: true, \r\n              result: result,\r\n              userId: userId,\r\n              testId: testId\r\n            }, { headers: corsHeaders });\r\n          } catch (e) {\r\n            console.log('Test insert failed:', e);\r\n            return Response.json({ \r\n              success: false, \r\n              error: e.message,\r\n              userId: request.headers.get('X-User-Id') || 'test-user'\r\n            }, { headers: corsHeaders });\r\n          }\r\n        }\r\n\r\n    // Analytics endpoint\r\n    if (path === '/api/analytics/summary') {\r\n      try {\r\n        const userId = request.headers.get('X-User-Id');\r\n\r\n        // Get current month for date filtering\r\n        const now = new Date();\r\n        const currentMonth = now.toISOString().slice(0, 7); // YYYY-MM format\r\n        const monthStart = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\r\n\r\n        // Initialize response data\r\n        let stats = {\r\n          totalIntakes: 0,\r\n          averageFitScore: 75,\r\n          placementRate: 65,\r\n          remainingRecommendations: 100\r\n        };\r\n\r\n        let topCarriers: any[] = [];\r\n        let trends: any[] = [];\r\n\r\n        try {\r\n          // Get total intakes - check multiple tables for compatibility\r\n          const intakesResult = await env.DB.prepare(`\r\n            SELECT COUNT(*) as count FROM (\r\n              SELECT id FROM intakes\r\n              UNION ALL\r\n              SELECT id FROM intake_submissions\r\n            )\r\n          `).first();\r\n\r\n          stats.totalIntakes = (intakesResult?.count as number) || 0;\r\n\r\n          // If we have a user ID, get user-specific data\r\n          if (userId) {\r\n            // Get user's monthly usage\r\n            try {\r\n              const userUsage = await env.DB.prepare(`\r\n                SELECT COUNT(*) as used\r\n                FROM recommendations\r\n                WHERE user_id = ?\r\n                  AND created_at >= ?\r\n              `).bind(userId, monthStart).first();\r\n\r\n              const used = (userUsage?.used as number) || 0;\r\n              stats.remainingRecommendations = Math.max(0, 100 - used);\r\n            } catch (e) {\r\n              console.log('Could not get user usage:', e);\r\n            }\r\n\r\n            // Get user's average fit score\r\n            try {\r\n              const avgScore = await env.DB.prepare(`\r\n                SELECT AVG(fit_score) as avg\r\n                FROM recommendations\r\n                WHERE user_id = ?\r\n              `).bind(userId).first();\r\n\r\n              if (avgScore?.avg) {\r\n                stats.averageFitScore = Math.round(avgScore.avg as number);\r\n              }\r\n            } catch (e) {\r\n              console.log('Could not get average score:', e);\r\n            }\r\n\r\n            // Get top carriers\r\n            try {\r\n              const carriers = await env.DB.prepare(`\r\n                SELECT\r\n                  carrier_id,\r\n                  carrier_name,\r\n                  COUNT(*) as count,\r\n                  AVG(fit_score) as avg_score\r\n                FROM recommendations\r\n                WHERE user_id = ?\r\n                GROUP BY carrier_id, carrier_name\r\n                ORDER BY count DESC\r\n                LIMIT 5\r\n              `).bind(userId).all();\r\n\r\n              if (carriers?.results) {\r\n                topCarriers = carriers.results.map((c: any, idx: number) => ({\r\n                  id: c.carrier_id || String(idx + 1),\r\n                  name: c.carrier_name || `Carrier ${idx + 1}`,\r\n                  count: c.count || 0,\r\n                  successRate: Math.round(c.avg_score || 75)\r\n                }));\r\n              }\r\n            } catch (e) {\r\n              console.log('Could not get top carriers:', e);\r\n            }\r\n\r\n            // Get monthly trends (last 6 months)\r\n            try {\r\n              const sixMonthsAgo = new Date();\r\n              sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\r\n\r\n              const monthlyData = await env.DB.prepare(`\r\n                SELECT\r\n                  strftime('%Y-%m', created_at) as month,\r\n                  COUNT(*) as count\r\n                FROM recommendations\r\n                WHERE user_id = ?\r\n                  AND created_at >= ?\r\n                GROUP BY strftime('%Y-%m', created_at)\r\n                ORDER BY month DESC\r\n                LIMIT 6\r\n              `).bind(userId, sixMonthsAgo.toISOString()).all();\r\n\r\n              if (monthlyData?.results) {\r\n                trends = monthlyData.results.map((m: any) => ({\r\n                  month: m.month,\r\n                  intakes: m.count || 0,\r\n                  conversions: Math.round((m.count || 0) * 0.72), // Estimated conversion\r\n                  conversionRate: 72\r\n                }));\r\n              }\r\n            } catch (e) {\r\n              console.log('Could not get trends:', e);\r\n            }\r\n          }\r\n\r\n          // Calculate placement rate\r\n          try {\r\n            const placements = await env.DB.prepare(`\r\n              SELECT\r\n                COUNT(CASE WHEN status = 'approved' OR status = 'placed' THEN 1 END) as placed,\r\n                COUNT(*) as total\r\n              FROM outcomes\r\n            `).first();\r\n\r\n            if (placements && (placements.total as number) > 0) {\r\n              stats.placementRate = Math.round(((placements.placed as number) / (placements.total as number)) * 100);\r\n            }\r\n          } catch (e) {\r\n            console.log('Could not get placement rate:', e);\r\n          }\r\n\r\n        } catch (dbError) {\r\n          console.error('Database query error:', dbError);\r\n          // Continue with default values if DB queries fail\r\n        }\r\n\r\n        return Response.json({\r\n          stats,\r\n          topCarriers,\r\n          trends,\r\n          lastUpdated: new Date().toISOString()\r\n        }, { headers: corsHeaders });\r\n\r\n      } catch (error) {\r\n        console.error('Analytics endpoint error:', error);\r\n        return Response.json({\r\n          stats: {\r\n            totalIntakes: 0,\r\n            averageFitScore: 0,\r\n            placementRate: 0,\r\n            remainingRecommendations: 100\r\n          },\r\n          topCarriers: [],\r\n          trends: [],\r\n          lastUpdated: new Date().toISOString(),\r\n          error: 'Analytics data temporarily unavailable'\r\n        }, { status: 200, headers: corsHeaders });\r\n      }\r\n    }\r\n\r\n    // Subscription endpoint for billing\r\n    if (path.startsWith('/api/subscriptions/') && request.method === 'GET') {\r\n      const userId = path.split('/')[3];\r\n      try {\r\n        // Return real data structure with zeros - no mock data\r\n        // In production, this would query Clerk's API or your database\r\n        return Response.json({\r\n          userId,\r\n          subscription: null, // No subscription until user actually subscribes\r\n          usage: {\r\n            current: 0,\r\n            limit: 5, // Free tier limit\r\n            resetDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n          },\r\n          plan: null // No plan until user subscribes\r\n        }, { headers: corsHeaders });\r\n      } catch (error) {\r\n        console.error('Subscription endpoint error:', error);\r\n        return Response.json({\r\n          userId,\r\n          subscription: null,\r\n          usage: { current: 0, limit: 5, resetDate: new Date().toISOString() },\r\n          plan: null,\r\n          error: 'Subscription data temporarily unavailable'\r\n        }, { status: 200, headers: corsHeaders });\r\n      }\r\n    }\r\n\r\n    // User history endpoint\r\n    if (path.startsWith('/api/user/') && path.endsWith('/history') && request.method === 'GET') {\r\n      try {\r\n        const userId = path.split('/')[3];\r\n        console.log('Fetching history for user:', userId);\r\n        \r\n        // First, let's check what tables exist and what data we have\r\n        const tableCheck = await env.DB.prepare(`\r\n          SELECT name FROM sqlite_master WHERE type='table' AND name IN ('intakes', 'recommendations', 'intake_submissions')\r\n        `).all();\r\n        console.log('Available tables:', tableCheck.results?.map((t: any) => t.name) || []);\r\n\r\n        // Check if we have any data in intakes table with user_id\r\n        const intakesCheck = await env.DB.prepare(`\r\n          SELECT COUNT(*) as count FROM intakes WHERE user_id = ?\r\n        `).bind(userId).first();\r\n        console.log('Intakes with user_id:', intakesCheck?.count || 0);\r\n\r\n        // Check if we have any data in recommendations table with user_id\r\n        const recommendationsCheck = await env.DB.prepare(`\r\n          SELECT COUNT(*) as count FROM recommendations WHERE user_id = ?\r\n        `).bind(userId).first();\r\n        console.log('Recommendations with user_id:', recommendationsCheck?.count || 0);\r\n\r\n        // Check intake_submissions table (legacy compatibility)\r\n        const intakeSubmissionsCheck = await env.DB.prepare(`\r\n          SELECT COUNT(*) as count FROM intake_submissions\r\n        `).first();\r\n        console.log('Total intake_submissions:', intakeSubmissionsCheck?.count || 0);\r\n\r\n        // Try to get recommendations from the current structure\r\n        const recommendations = await env.DB.prepare(`\r\n          SELECT \r\n            recommendation_id as id,\r\n            created_at as timestamp,\r\n            'recommendation' as type,\r\n            carrier_name as title,\r\n            fit_score as score,\r\n            COUNT(*) as carrier_count,\r\n            AVG(fit_score) as avg_fit\r\n          FROM recommendations\r\n          WHERE user_id = ? AND recommendation_id IS NOT NULL\r\n          GROUP BY recommendation_id\r\n          ORDER BY created_at DESC\r\n          LIMIT 50\r\n        `).bind(userId).all();\r\n\r\n        console.log('Found recommendations:', recommendations.results?.length || 0);\r\n\r\n        // Try to get intakes from the current structure\r\n        const intakes = await env.DB.prepare(`\r\n          SELECT \r\n            id,\r\n            created_at as timestamp,\r\n            'intake' as type,\r\n            'Intake submitted' as title,\r\n            data as intake_data\r\n          FROM intakes\r\n          WHERE user_id = ?\r\n          ORDER BY created_at DESC\r\n          LIMIT 50\r\n        `).bind(userId).all();\r\n\r\n        console.log('Found intakes:', intakes.results?.length || 0);\r\n\r\n        // Also try intake_submissions table as fallback\r\n        const intakeSubmissions = await env.DB.prepare(`\r\n          SELECT \r\n            id,\r\n            created_at as timestamp,\r\n            'intake' as type,\r\n            'Intake submitted' as title,\r\n            data as intake_data\r\n          FROM intake_submissions\r\n          ORDER BY created_at DESC\r\n          LIMIT 50\r\n        `).all();\r\n\r\n        console.log('Found intake_submissions:', intakeSubmissions.results?.length || 0);\r\n\r\n        // Combine and format history\r\n        const history = [];\r\n        \r\n        // Add recommendations\r\n        if (recommendations.results) {\r\n          for (const rec of recommendations.results) {\r\n            history.push({\r\n              id: rec.id,\r\n              timestamp: rec.timestamp,\r\n              type: rec.type,\r\n              title: `${rec.title} - ${Math.round(rec.avg_fit)}% fit (${rec.carrier_count} carriers)`,\r\n              score: Math.round(rec.avg_fit),\r\n              intakeData: null\r\n            });\r\n          }\r\n        }\r\n\r\n        // Add intakes\r\n        if (intakes.results) {\r\n          for (const intake of intakes.results) {\r\n            history.push({\r\n              id: intake.id,\r\n              timestamp: intake.timestamp,\r\n              type: intake.type,\r\n              title: intake.title,\r\n              score: null,\r\n              intakeData: intake.intake_data ? JSON.parse(intake.intake_data) : null\r\n            });\r\n          }\r\n        }\r\n\r\n        // Add intake_submissions as fallback\r\n        if (intakeSubmissions.results && history.length === 0) {\r\n          for (const intake of intakeSubmissions.results) {\r\n            history.push({\r\n              id: intake.id,\r\n              timestamp: intake.timestamp,\r\n              type: intake.type,\r\n              title: intake.title,\r\n              score: null,\r\n              intakeData: intake.intake_data ? JSON.parse(intake.intake_data) : null\r\n            });\r\n          }\r\n        }\r\n\r\n        // Sort by timestamp (newest first)\r\n        history.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n\r\n        console.log('Returning history with', history.length, 'items');\r\n        return Response.json(history, { headers: corsHeaders });\r\n      } catch (error) {\r\n        console.error('History endpoint error:', error);\r\n        return Response.json([], { headers: corsHeaders });\r\n      }\r\n    }\r\n    \r\n    if (path === '/api/intake/submit' && request.method === 'POST') {\r\n      try {\r\n        const intake = await request.json();\r\n        const intakeData = intake as any;\r\n        const userId = request.headers.get('X-User-Id') || 'anonymous';\r\n        const recommendationId = 'rec-' + Date.now();\r\n        const intakeId = 'intake-' + Date.now();\r\n        \r\n        // Log the intake for analytics and history tracking\r\n        console.log('Intake submitted:', {\r\n          userId,\r\n          recommendationId,\r\n          intakeId,\r\n          intakeType: intakeData.answers ? 'legacy' : 'orion',\r\n          timestamp: new Date().toISOString()\r\n        });\r\n\r\n        // Store intake in database\r\n        try {\r\n          console.log('Storing intake with userId:', userId, 'intakeId:', intakeId);\r\n          const result = await env.DB.prepare(`\r\n            INSERT INTO intakes (id, tenant_id, payload_json, validated, tier2_triggered, created_at, user_id)\r\n            VALUES (?, ?, ?, ?, ?, ?, ?)\r\n          `).bind(\r\n            intakeId, \r\n            'default-tenant', // tenant_id (required field) - use same as existing records\r\n            JSON.stringify(intakeData), // payload_json\r\n            true, // validated\r\n            intakeData.tier2Triggered || false, // tier2_triggered\r\n            new Date().toISOString(), // created_at\r\n            userId // user_id\r\n          ).run();\r\n          console.log('Intake stored successfully:', result);\r\n        } catch (e) {\r\n          console.log('Could not log intake to database:', e);\r\n          console.log('Error details:', e);\r\n        }\r\n\r\n        // Generate search query from intake data\r\n        const searchQuery = `\r\n          Age ${intakeData.core?.age || intakeData.age || 35} in ${intakeData.core?.state || intakeData.state || 'CA'},\r\n          ${intakeData.core?.height || intakeData.height || 70} inches ${intakeData.core?.weight || intakeData.weight || 170} lbs,\r\n          nicotine use: ${intakeData.core?.nicotineUse || intakeData.nicotineUse || 'never'},\r\n          health conditions: ${intakeData.core?.majorConditions || intakeData.majorConditions || 'none'},\r\n          coverage amount: $${intakeData.core?.coverageTarget || intakeData.coverageAmount || 500000}\r\n        `;\r\n\r\n        console.log('Performing RAG search with query:', searchQuery);\r\n\r\n        // Perform RAG search\r\n        const ragResults = await performRAGSearch(searchQuery, env, 15);\r\n        console.log('RAG search results:', ragResults.length, 'matches found');\r\n\r\n        // Generate real recommendations\r\n        const recommendations = await generateRealRecommendations(intakeData, ragResults, env);\r\n        console.log('Generated recommendations:', recommendations.length);\r\n\r\n        // Store recommendations in database\r\n        try {\r\n          console.log('Storing recommendations with userId:', userId, 'intakeId:', intakeId);\r\n          const result = await env.DB.prepare(`\r\n            INSERT INTO recommendations (\r\n              id, intake_id, model_snapshot, fit_json, citations, latency_ms, created_at,\r\n              recommendation_id, user_id, carrier_id, carrier_name, fit_score\r\n            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n          `).bind(\r\n            crypto.randomUUID(),\r\n            intakeId, // intake_id (required)\r\n            'llama-3.1-8b-instruct', // model_snapshot\r\n            JSON.stringify(recommendations), // fit_json (required)\r\n            JSON.stringify(recommendations.flatMap(r => r.citations || [])), // citations (required)\r\n            Date.now() - parseInt(recommendationId.split('-')[1]), // latency_ms\r\n            new Date().toISOString(), // created_at\r\n            recommendationId, // recommendation_id\r\n            userId, // user_id\r\n            recommendations[0]?.carrierId || null, // carrier_id (first carrier)\r\n            recommendations[0]?.carrierName || null, // carrier_name (first carrier)\r\n            Math.round(recommendations.reduce((sum, r) => sum + r.fitPct, 0) / recommendations.length) // fit_score (average)\r\n          ).run();\r\n          console.log('Recommendations stored successfully:', result);\r\n        } catch (e) {\r\n          console.log('Could not store recommendations:', e);\r\n        }\r\n\r\n        // Calculate summary statistics\r\n        const averageFit = recommendations.length > 0 \r\n          ? Math.round(recommendations.reduce((sum, r) => sum + r.fitPct, 0) / recommendations.length)\r\n          : 0;\r\n\r\n        const topCarrierId = recommendations.length > 0 ? recommendations[0].carrierId : 'none';\r\n\r\n        // Format response in the expected format\r\n        const response = {\r\n          recommendationId,\r\n          status: 'completed',\r\n          intake: intake,\r\n          recommendations: recommendations.map(rec => ({\r\n            carrierId: rec.carrierId,\r\n            carrierName: rec.carrierName,\r\n            fitScore: rec.fitPct,\r\n            tier: rec.fitPct >= 85 ? 'preferred' : rec.fitPct >= 70 ? 'standard' : 'challenging',\r\n            reasoning: {\r\n              pros: rec.reasons,\r\n              cons: rec.advisories,\r\n              summary: `Fit score of ${rec.fitPct}% based on underwriting criteria.`\r\n            },\r\n            estimatedPremium: {\r\n              monthly: Math.round(1200 + (100 - rec.fitPct) * 10),\r\n              annual: Math.round((1200 + (100 - rec.fitPct) * 10) * 12),\r\n              confidence: rec.confidence\r\n            },\r\n            underwritingPath: rec.fitPct >= 80 ? 'simplified' : 'standard',\r\n            requiresExam: rec.apsLikely,\r\n            processingTime: rec.fitPct >= 80 ? '1-2 weeks' : '2-3 weeks',\r\n            citations: rec.citations\r\n          })),\r\n          top: recommendations.slice(0, 1).map(rec => ({\r\n            carrierId: rec.carrierId,\r\n            carrierName: rec.carrierName,\r\n            fitScore: rec.fitPct,\r\n            tier: rec.fitPct >= 85 ? 'preferred' : rec.fitPct >= 70 ? 'standard' : 'challenging',\r\n            reasoning: {\r\n              pros: rec.reasons,\r\n              cons: rec.advisories,\r\n              summary: `Best match with ${rec.fitPct}% fit score.`\r\n            },\r\n            estimatedPremium: {\r\n              monthly: Math.round(1200 + (100 - rec.fitPct) * 10),\r\n              annual: Math.round((1200 + (100 - rec.fitPct) * 10) * 12),\r\n              confidence: rec.confidence\r\n            },\r\n            underwritingPath: rec.fitPct >= 80 ? 'simplified' : 'standard',\r\n            requiresExam: rec.apsLikely,\r\n            processingTime: rec.fitPct >= 80 ? '1-2 weeks' : '2-3 weeks',\r\n            citations: rec.citations\r\n          })),\r\n          premiumSuggestion: `Based on your profile, we recommend starting with a monthly premium of $${Math.round(1200 + (100 - averageFit) * 10)} for optimal coverage.`,\r\n          summary: {\r\n            averageFit,\r\n            totalCarriersEvaluated: recommendations.length,\r\n            tier2Recommended: averageFit < 70,\r\n            topCarrierId,\r\n            notes: recommendations.length > 0 ? 'Real recommendations generated using RAG system.' : 'No carriers found in database.'\r\n          },\r\n          metadata: {\r\n            processingTime: Date.now() - parseInt(recommendationId.split('-')[1]),\r\n            ragQueriesCount: ragResults.length,\r\n            citationsFound: recommendations.reduce((sum, r) => sum + r.citations.length, 0),\r\n            modelUsed: 'llama-3.1-8b-instruct'\r\n          },\r\n          timestamp: new Date().toISOString()\r\n        };\r\n\r\n        console.log('Returning response with', recommendations.length, 'recommendations');\r\n        return Response.json(response, { headers: corsHeaders });\r\n\r\n      } catch (error) {\r\n        console.error('Intake submission error:', error);\r\n        return Response.json({\r\n          error: 'Failed to process intake',\r\n          message: (error as Error).message,\r\n          recommendationId: 'error-' + Date.now()\r\n        }, { status: 500, headers: corsHeaders });\r\n      }\r\n    }\r\n    \r\n        // Outcomes endpoint for logging application outcomes\r\n        if (path === '/api/outcomes' && request.method === 'POST') {\r\n          try {\r\n            const outcome = await request.json();\r\n            const userId = request.headers.get('X-User-Id') || 'anonymous';\r\n            \r\n            console.log('Logging outcome:', { userId, outcome });\r\n            \r\n            // Store outcome in database\r\n            try {\r\n              await env.DB.prepare(`\r\n                INSERT INTO outcomes (id, user_id, recommendation_id, carrier_id, status, created_at)\r\n                VALUES (?, ?, ?, ?, ?, ?)\r\n              `).bind(\r\n                crypto.randomUUID(),\r\n                userId,\r\n                outcome.recommendationId || null,\r\n                outcome.carrierId || null,\r\n                outcome.status || 'applied',\r\n                new Date().toISOString()\r\n              ).run();\r\n            } catch (e) {\r\n              console.log('Could not log outcome to database:', e);\r\n            }\r\n            \r\n            return Response.json({ success: true, message: 'Outcome logged successfully' }, { headers: corsHeaders });\r\n          } catch (error) {\r\n            console.error('Outcomes endpoint error:', error);\r\n            return Response.json({ error: 'Failed to log outcome' }, { status: 500, headers: corsHeaders });\r\n          }\r\n        }\r\n        \r\n        return Response.json({ error: 'Not found' }, { status: 404, headers: corsHeaders });\r\n      }\r\n    };"],
  "mappings": "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",
  "names": []
}
