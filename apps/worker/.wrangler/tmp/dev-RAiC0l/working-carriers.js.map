{
  "version": 3,
  "sources": ["../../../src/working-carriers.ts", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-O2Vveo/middleware-insertion-facade.js", "../../../../../../../../Users/cinef/AppData/Local/npm-cache/_npx/d77349f55c2be1c0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-O2Vveo/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\sites\\carrierllm\\carrierllm\\apps\\worker\\.wrangler\\tmp\\dev-RAiC0l",
  "sourcesContent": ["// Working carriers worker without external dependencies\r\ninterface Env {\r\n  DB: D1Database;\r\n  DOCS_BUCKET: R2Bucket;\r\n  CARRIER_INDEX: any;\r\n  AI: any;\r\n}\r\n\r\n// Helper function to add CORS headers\r\nfunction corsHeaders() {\r\n  return {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-User-Id, X-Organization-Id',\r\n    'Content-Type': 'application/json'\r\n  };\r\n}\r\n\r\n// Function to populate carriers table from existing documents\r\nasync function populateCarriersFromDocuments(env: Env) {\r\n  try {\r\n    // Check if carriers table is empty\r\n    const existingCarriers = await env.DB.prepare('SELECT COUNT(*) as count FROM carriers').first() as { count: number } | null;\r\n    if (existingCarriers && existingCarriers.count > 0) {\r\n      return; // Carriers already populated\r\n    }\r\n\r\n    console.log('Populating carriers table from existing documents...');\r\n\r\n    // List all documents in R2\r\n    const list = await env.DOCS_BUCKET.list();\r\n\r\n    // Extract unique carriers from document names\r\n    const carriers = new Map<string, any>();\r\n    \r\n    for (const obj of list.objects) {\r\n      const filename = obj.key;\r\n      const carrierInfo = extractCarrierInfo(filename);\r\n      \r\n      if (carrierInfo && !carriers.has(carrierInfo.id)) {\r\n        carriers.set(carrierInfo.id, carrierInfo);\r\n      }\r\n    }\r\n\r\n    // Insert carriers into database\r\n    for (const carrier of carriers.values()) {\r\n      try {\r\n        await env.DB.prepare(`\r\n          INSERT OR IGNORE INTO carriers (id, name, am_best, portal_url, agent_phone, preferred_tier_rank, available_states)\r\n          VALUES (?, ?, ?, ?, ?, ?, ?)\r\n        `).bind(\r\n          carrier.id,\r\n          carrier.name,\r\n          carrier.amBest,\r\n          carrier.portalUrl,\r\n          carrier.agentPhone,\r\n          carrier.preferredTierRank,\r\n          JSON.stringify(carrier.availableStates)\r\n        ).run();\r\n      } catch (error) {\r\n        console.error(`Error inserting carrier ${carrier.id}:`, error);\r\n      }\r\n    }\r\n\r\n    console.log(`Populated ${carriers.size} carriers from documents`);\r\n  } catch (error) {\r\n    console.error('Error populating carriers from documents:', error);\r\n  }\r\n}\r\n\r\n// Function to extract carrier information from filename\r\nfunction extractCarrierInfo(filename: string) {\r\n  // Remove file extension\r\n  const nameWithoutExt = filename.replace(/\\.(pdf|doc|docx|txt)$/i, '');\r\n  \r\n  // Split by common separators and clean up\r\n  const parts = nameWithoutExt.split(/[-_\\s]+/).filter(part => part.length > 0);\r\n  \r\n  if (parts.length === 0) return null;\r\n  \r\n  // Use the first part as carrier name, create ID from it\r\n  const carrierName = parts[0];\r\n  const carrierId = carrierName.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n  \r\n  return {\r\n    id: carrierId,\r\n    name: carrierName,\r\n    amBest: 'A+', // Default value\r\n    portalUrl: `https://${carrierId}.com`, // Default URL\r\n    agentPhone: '1-800-CARRIER', // Default phone\r\n    preferredTierRank: 1, // Default rank\r\n    availableStates: ['All States'] // Default states\r\n  };\r\n}\r\n\r\nexport default {\r\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const path = url.pathname;\r\n    const method = request.method;\r\n\r\n    // Handle CORS preflight\r\n    if (method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        status: 204,\r\n        headers: corsHeaders()\r\n      });\r\n    }\r\n\r\n    try {\r\n      // Health check\r\n      if (path === '/api/health') {\r\n        return new Response(JSON.stringify({ \r\n          status: 'healthy', \r\n          timestamp: new Date().toISOString(),\r\n          path: path \r\n        }), {\r\n          headers: corsHeaders()\r\n        });\r\n      }\r\n\r\n      // Test carriers endpoint\r\n      if (path === '/api/carriers/test') {\r\n        return new Response(JSON.stringify({ \r\n          message: 'Carriers test endpoint working',\r\n          carriers: []\r\n        }), {\r\n          headers: corsHeaders()\r\n        });\r\n      }\r\n\r\n      // Get carriers with user preferences\r\n      if (path === '/api/carriers/with-preferences' && method === 'GET') {\r\n        const userId = request.headers.get('X-User-Id');\r\n        if (!userId) {\r\n          return new Response(JSON.stringify({ error: 'User ID required' }), { \r\n            status: 401, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        // First, ensure carriers are populated from existing documents\r\n        await populateCarriersFromDocuments(env);\r\n\r\n        // Get all carriers\r\n        const carriers = await env.DB.prepare('SELECT * FROM carriers ORDER BY name').all();\r\n        \r\n        // Get user preferences\r\n        const userPreferences = await env.DB.prepare(\r\n          'SELECT carrier_id, enabled FROM user_carrier_preferences WHERE user_id = ?'\r\n        ).bind(userId).all();\r\n\r\n        // Get organization settings (if user is in an organization)\r\n        const organizationId = request.headers.get('X-Organization-Id');\r\n        let orgSettings = { results: [] as Array<{ carrier_id: string; enabled: boolean }> };\r\n        if (organizationId) {\r\n          orgSettings = await env.DB.prepare(\r\n            'SELECT carrier_id, enabled FROM organization_carrier_settings WHERE organization_id = ?'\r\n          ).bind(organizationId).all() as { results: Array<{ carrier_id: string; enabled: boolean }> };\r\n        }\r\n\r\n        const carriersWithPreferences = carriers.results.map((carrier: any) => {\r\n          const userPref = userPreferences.results.find((pref: any) => pref.carrier_id === carrier.id);\r\n          const orgSetting = orgSettings.results.find((setting: any) => setting.carrier_id === carrier.id);\r\n          \r\n          const userEnabled = userPref ? userPref.enabled : true; // Default to enabled\r\n          const organizationEnabled = orgSetting ? orgSetting.enabled : true; // Default to enabled\r\n          const isOrganizationControlled = organizationId && orgSetting && !orgSetting.enabled; // Controlled if org disabled it\r\n\r\n          return {\r\n            id: carrier.id,\r\n            name: carrier.name,\r\n            amBest: carrier.am_best,\r\n            portalUrl: carrier.portal_url,\r\n            agentPhone: carrier.agent_phone,\r\n            preferredTierRank: carrier.preferred_tier_rank,\r\n            availableStates: carrier.available_states ? JSON.parse(carrier.available_states) : [],\r\n            userEnabled,\r\n            organizationEnabled,\r\n            isOrganizationControlled\r\n          };\r\n        });\r\n\r\n        return new Response(JSON.stringify(carriersWithPreferences), { \r\n          headers: corsHeaders() \r\n        });\r\n      }\r\n\r\n      // Update user carrier preference\r\n      if (path === '/api/carriers/preferences' && method === 'POST') {\r\n        const userId = request.headers.get('X-User-Id');\r\n        if (!userId) {\r\n          return new Response(JSON.stringify({ error: 'User ID required' }), { \r\n            status: 401, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        const { carrierId, enabled } = await request.json() as { carrierId: string; enabled: boolean };\r\n        if (!carrierId || typeof enabled !== 'boolean') {\r\n          return new Response(JSON.stringify({ error: 'carrierId and enabled are required' }), { \r\n            status: 400, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        // Upsert user preference\r\n        await env.DB.prepare(`\r\n          INSERT INTO user_carrier_preferences (user_id, carrier_id, enabled, created_at, updated_at)\r\n          VALUES (?, ?, ?, datetime('now'), datetime('now'))\r\n          ON CONFLICT(user_id, carrier_id) DO UPDATE SET\r\n            enabled = excluded.enabled,\r\n            updated_at = datetime('now')\r\n        `).bind(userId, carrierId, enabled).run();\r\n\r\n        return new Response(JSON.stringify({ success: true }), { \r\n          headers: corsHeaders() \r\n        });\r\n      }\r\n\r\n      // Get user documents\r\n      if (path === '/api/documents/user' && method === 'GET') {\r\n        const userId = request.headers.get('X-User-Id');\r\n        if (!userId) {\r\n          return new Response(JSON.stringify({ error: 'User ID required' }), { \r\n            status: 401, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        const documents = await env.DB.prepare(`\r\n          SELECT id, filename, carrier_id, carrier_name, effective_date, file_size, file_type, \r\n                 created_at, processed\r\n          FROM user_documents \r\n          WHERE user_id = ? \r\n          ORDER BY created_at DESC\r\n        `).bind(userId).all();\r\n\r\n        return new Response(JSON.stringify(documents.results), { \r\n          headers: corsHeaders() \r\n        });\r\n      }\r\n\r\n      // Upload document\r\n      if (path === '/api/documents/upload' && method === 'POST') {\r\n        const userId = request.headers.get('X-User-Id');\r\n        if (!userId) {\r\n          return new Response(JSON.stringify({ error: 'User ID required' }), { \r\n            status: 401, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        const formData = await request.formData();\r\n        const file = formData.get('file') as File;\r\n        const carrierId = formData.get('carrierId') as string;\r\n        const carrierName = formData.get('carrierName') as string;\r\n        const effectiveDate = formData.get('effectiveDate') as string;\r\n\r\n        if (!file || !carrierId || !carrierName) {\r\n          return new Response(JSON.stringify({ error: 'file, carrierId, and carrierName are required' }), { \r\n            status: 400, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        // Validate file type\r\n        const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];\r\n        if (!allowedTypes.includes(file.type)) {\r\n          return new Response(JSON.stringify({ error: 'Invalid file type. Only PDF, DOC, DOCX, and TXT files are allowed.' }), { \r\n            status: 400, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        // Validate file size (10MB limit)\r\n        if (file.size > 10 * 1024 * 1024) {\r\n          return new Response(JSON.stringify({ error: 'File size too large. Maximum size is 10MB.' }), { \r\n            status: 400, \r\n            headers: corsHeaders() \r\n          });\r\n        }\r\n\r\n        // Generate unique filename\r\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n        const fileExtension = file.name.split('.').pop();\r\n        const filename = `${carrierId}_${timestamp}.${fileExtension}`;\r\n        const r2Key = `user-documents/${userId}/${filename}`;\r\n\r\n        // Upload to R2\r\n        const fileBuffer = await file.arrayBuffer();\r\n        await env.DOCS_BUCKET.put(r2Key, fileBuffer, {\r\n          httpMetadata: {\r\n            contentType: file.type,\r\n          },\r\n        });\r\n\r\n        // Store metadata in database\r\n        const result = await env.DB.prepare(`\r\n          INSERT INTO user_documents (user_id, filename, carrier_id, carrier_name, effective_date, \r\n                                    file_size, file_type, r2_key, created_at, processed)\r\n          VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), 0)\r\n        `).bind(\r\n          userId,\r\n          file.name,\r\n          carrierId,\r\n          carrierName,\r\n          effectiveDate || new Date().toISOString().split('T')[0],\r\n          file.size,\r\n          file.type,\r\n          r2Key\r\n        ).run();\r\n\r\n        return new Response(JSON.stringify({ \r\n          success: true, \r\n          documentId: result.meta.last_row_id,\r\n          message: `Successfully uploaded ${file.name} for ${carrierName}` \r\n        }), { \r\n          headers: corsHeaders() \r\n        });\r\n      }\r\n\r\n      // Default 404 handler\r\n      return new Response(JSON.stringify({ \r\n        message: 'Not found',\r\n        path: path \r\n      }), {\r\n        status: 404,\r\n        headers: corsHeaders()\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Worker error:', error);\r\n      return new Response(JSON.stringify({ \r\n        error: 'Internal server error', \r\n        details: error instanceof Error ? error.message : 'Unknown error' \r\n      }), {\r\n        status: 500,\r\n        headers: corsHeaders()\r\n      });\r\n    }\r\n  }\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\working-carriers.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\src\\\\working-carriers.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-O2Vveo\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\cinef\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\d77349f55c2be1c0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-O2Vveo\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\sites\\\\carrierllm\\\\carrierllm\\\\apps\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-O2Vveo\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
